{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tekommin.REDMOND\\\\source\\\\repos\\\\capacity-management-ui\\\\src\\\\Map.js\";\nimport React from \"react\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\nimport am4geodata_usaLow from \"@amcharts/amcharts4-geodata/usaLow\";\nam4core.useTheme(am4themes_animated);\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.azureLocations = {\n      \"asiaeast\": {\n        \"region\": \"East Asia\",\n        \"location\": \"Hong Kong\",\n        \"latitude\": 22.3193,\n        \"longitude\": 114.1694\n      },\n      \"uscentral\": {\n        \"region\": \"Central US\",\n        \"location\": \"Iowa\",\n        \"latitude\": 42.032974,\n        \"longitude\": -93.581543\n      },\n      \"usdodcentral\": {\n        \"region\": \"US DoD Central\",\n        \"location\": \"Iowa\",\n        \"latitude\": 42.032974,\n        \"longitude\": -93.581543\n      }\n    };\n    this.state = {\n      error: null,\n      isLoaded: false,\n      liveRegions: [],\n      chart: null\n    };\n  }\n\n  componentDidMount() {\n    this.getAllRegions();\n    let chart = am4core.create(\"chartdiv\", am4maps.MapChart); // Set map definition\n\n    chart.geodata = am4geodata_worldLow; // Set projection\n\n    chart.projection = new am4maps.projections.Miller(); // Series for World map\n\n    let worldSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    worldSeries.useGeodata = true;\n    var polygonTemplate = worldSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0);\n    polygonTemplate.nonScalingStroke = true; // Hover state\n\n    let hs = polygonTemplate.states.create(\"hover\");\n    hs.properties.fill = am4core.color(\"#367B25\");\n    worldSeries.exclude = [\"AQ\"];\n    /**\r\n     * Series for the U.S. map\r\n     * It will use its own `geodata`\r\n     */\n\n    let usaSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    usaSeries.geodata = am4geodata_usaLow;\n    usaSeries.useGeodata = true;\n    polygonTemplate = usaSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0);\n    polygonTemplate.nonScalingStroke = true;\n    this.setState({\n      chart: chart\n    });\n    this.renderGeoLocations(chart);\n  }\n\n  componentDidUpdate() {\n    this.renderGeoLocations(chart);\n  }\n\n  componentWillUnmount() {}\n\n  renderGeoLocations(chart) {\n    /*\r\n      Adding markers\r\n    */\n    let imageSeries = chart.series.push(new am4maps.MapImageSeries());\n    let imageSeriesTemplate = imageSeries.mapImages.template;\n    let circle = imageSeriesTemplate.createChild(am4core.Circle);\n    circle.radius = 4;\n    circle.fill = am4core.color(\"#B27799\");\n    circle.stroke = am4core.color(\"#FFFFFF\");\n    circle.strokeWidth = 2;\n    circle.nonScaling = true;\n    circle.tooltipText = \"{region} \\n {location}\";\n    imageSeriesTemplate.propertyFields.latitude = \"latitude\";\n    imageSeriesTemplate.propertyFields.longitude = \"longitude\";\n    let imageSeriesData = [];\n    console.log(this.liveRegions);\n\n    for (var liveRegion of this.liveRegions) {\n      imageSeriesData.push(this.azureLocations[liveRegion.GeoRegion]);\n    }\n\n    imageSeries.data = imageSeriesData;\n  }\n\n  getAllRegions() {\n    fetch(\"https://localhost:44303/api/region/all\").then(res => res.json()).then(result => {\n      this.setState({\n        isLoaded: true,\n        liveRegions: result.content\n      });\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"chartdiv\",\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["C:\\Users\\tekommin.REDMOND\\source\\repos\\capacity-management-ui\\src\\Map.js"],"names":["React","am4core","am4themes_animated","am4maps","am4geodata_worldLow","am4geodata_usaLow","useTheme","Map","Component","constructor","props","azureLocations","state","error","isLoaded","liveRegions","chart","componentDidMount","getAllRegions","create","MapChart","geodata","projection","projections","Miller","worldSeries","series","push","MapPolygonSeries","useGeodata","polygonTemplate","mapPolygons","template","tooltipText","fill","colors","getIndex","nonScalingStroke","hs","states","properties","color","exclude","usaSeries","setState","renderGeoLocations","componentDidUpdate","componentWillUnmount","imageSeries","MapImageSeries","imageSeriesTemplate","mapImages","circle","createChild","Circle","radius","stroke","strokeWidth","nonScaling","propertyFields","latitude","longitude","imageSeriesData","console","log","liveRegion","GeoRegion","data","fetch","then","res","json","result","content","render","width","height"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\r\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\r\nimport am4geodata_usaLow from \"@amcharts/amcharts4-geodata/usaLow\";\r\nam4core.useTheme(am4themes_animated);\r\n\r\n\r\nclass Map extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      liveRegions: [],\r\n      chart: null\r\n    };\r\n  }\r\n\r\n  azureLocations = {\r\n                      \"asiaeast\":      {  \"region\" : \"East Asia\", \r\n                                          \"location\": \"Hong Kong\",\r\n                                          \"latitude\" : 22.3193,\r\n                                          \"longitude\": 114.1694\r\n                                       },\r\n\r\n                      \"uscentral\":     { \"region\" : \"Central US\", \r\n                                         \"location\": \"Iowa\",\r\n                                         \"latitude\" : 42.032974,\r\n                                         \"longitude\": -93.581543\r\n                                       },\r\n                      \"usdodcentral\":  { \"region\" : \"US DoD Central\", \r\n                                         \"location\": \"Iowa\",\r\n                                         \"latitude\" : 42.032974,\r\n                                         \"longitude\": -93.581543\r\n                                       }\r\n                    }\r\n\r\n  \r\n  componentDidMount() {\r\n\r\n    this.getAllRegions();\r\n\r\n\r\n    let chart = am4core.create(\"chartdiv\", am4maps.MapChart);\r\n\r\n    // Set map definition\r\n    chart.geodata = am4geodata_worldLow;\r\n    \r\n    // Set projection\r\n    chart.projection = new am4maps.projections.Miller();\r\n    \r\n    // Series for World map\r\n    let worldSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    worldSeries.useGeodata = true;\r\n    \r\n    var polygonTemplate = worldSeries.mapPolygons.template;\r\n    polygonTemplate.tooltipText = \"{name}\";\r\n    polygonTemplate.fill = chart.colors.getIndex(0);\r\n    polygonTemplate.nonScalingStroke = true;\r\n    \r\n    // Hover state\r\n    let hs = polygonTemplate.states.create(\"hover\");\r\n    hs.properties.fill = am4core.color(\"#367B25\");\r\n    worldSeries.exclude = [\"AQ\"];\r\n \r\n    /**\r\n     * Series for the U.S. map\r\n     * It will use its own `geodata`\r\n     */\r\n    let usaSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    usaSeries.geodata = am4geodata_usaLow;\r\n    usaSeries.useGeodata = true;\r\n    polygonTemplate = usaSeries.mapPolygons.template;\r\n    polygonTemplate.tooltipText = \"{name}\";\r\n    polygonTemplate.fill = chart.colors.getIndex(0);\r\n    polygonTemplate.nonScalingStroke = true;\r\n\r\n    this.setState({\r\n        chart: chart\r\n    });\r\n\r\n    this.renderGeoLocations(chart);\r\n\r\n  }\r\n\r\n  componentDidUpdate()\r\n  {\r\n    this.renderGeoLocations(chart);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n  \r\n  }\r\n\r\n  renderGeoLocations(chart)\r\n  {\r\n    /*\r\n      Adding markers\r\n    */\r\n    let imageSeries = chart.series.push(new am4maps.MapImageSeries());\r\n    let imageSeriesTemplate = imageSeries.mapImages.template;\r\n    let circle = imageSeriesTemplate.createChild(am4core.Circle);\r\n    circle.radius = 4;\r\n    circle.fill = am4core.color(\"#B27799\");\r\n    circle.stroke = am4core.color(\"#FFFFFF\");\r\n    circle.strokeWidth = 2;\r\n    circle.nonScaling = true;\r\n    circle.tooltipText = \"{region} \\n {location}\";\r\n\r\n    imageSeriesTemplate.propertyFields.latitude = \"latitude\";\r\n    imageSeriesTemplate.propertyFields.longitude = \"longitude\";\r\n\r\n    let imageSeriesData = [];\r\n    console.log(this.liveRegions);\r\n    for (var liveRegion of this.liveRegions)\r\n    {\r\n        imageSeriesData.push(this.azureLocations[liveRegion.GeoRegion]);\r\n    }\r\n\r\n    imageSeries.data = imageSeriesData;\r\n  }\r\n\r\n  getAllRegions()\r\n  {\r\n    fetch(\"https://localhost:44303/api/region/all\")\r\n    .then(res => res.json())\r\n    .then(\r\n      (result) => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          liveRegions: result.content\r\n        });\r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          error\r\n        });\r\n      }\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"chartdiv\" style={{ width: \"100%\", height: \"100%\" }}></div>\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nexport default Map;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tekommin.REDMOND\\\\source\\\\repos\\\\capacity-management-ui\\\\src\\\\Map.js\";\nimport React from \"react\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\nimport am4geodata_usaLow from \"@amcharts/amcharts4-geodata/usaLow\";\nam4core.useTheme(am4themes_animated);\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.azureLocations = {\n      \"asiaeast\": {\n        \"region\": \"Region : East Asia\",\n        \"location\": \"Location : Hong Kong\",\n        \"latitude\": 22.3193,\n        \"longitude\": 114.1694\n      },\n      \"uscentral\": {\n        \"region\": \"Region : Central US\",\n        \"location\": \"Location : Iowa\",\n        \"latitude\": 42.032974,\n        \"longitude\": -95.581543\n      },\n      \"usdodcentral\": {\n        \"region\": \"Region : US DoD Central\",\n        \"location\": \"Location : Iowa\",\n        \"latitude\": 42.032974,\n        \"longitude\": -93.581543\n      },\n      \"asiasoutheast\": {\n        \"region\": \"Region : Southeast Asia\",\n        \"location\": \"Location : Singapore\",\n        \"latitude\": 1.290270,\n        \"longitude\": 103.851959\n      },\n      \"australiac\": {\n        \"region\": \"Region : Australia Central\",\n        \"location\": \"Location : Canberra\",\n        \"latitude\": -35.28346,\n        \"longitude\": 149.12807\n      },\n      \"australiac2\": {\n        \"region\": \"Region : Australia Central 2\",\n        \"location\": \"Location : Canberra\",\n        \"latitude\": -36.080780,\n        \"longitude\": 146.916473\n      },\n      \"australiaeast\": {\n        \"region\": \"Region : Australia East\",\n        \"location\": \"Location : New South Wales\",\n        \"latitude\": -31.840233,\n        \"longitude\": 145.612793\n      }\n    };\n    this.state = {\n      error: null,\n      isLoaded: false,\n      liveRegions: [],\n      chart: null\n    };\n  }\n\n  componentDidMount() {\n    let chart = am4core.create(\"chartdiv\", am4maps.MapChart); // Set map definition\n\n    chart.geodata = am4geodata_worldLow; // Set projection\n\n    chart.projection = new am4maps.projections.Miller(); // Series for World map\n\n    let worldSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    worldSeries.useGeodata = true;\n    var polygonTemplate = worldSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0);\n    polygonTemplate.nonScalingStroke = true; // Hover state\n\n    let hs = polygonTemplate.states.create(\"hover\");\n    hs.properties.fill = am4core.color(\"#367B25\");\n    worldSeries.exclude = [\"AQ\"];\n    /**\r\n     * Series for the U.S. map\r\n     * It will use its own `geodata`\r\n     */\n\n    let usaSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    usaSeries.geodata = am4geodata_usaLow;\n    usaSeries.useGeodata = true;\n    polygonTemplate = usaSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0);\n    polygonTemplate.nonScalingStroke = true;\n    this.setState({\n      chart: chart\n    });\n    this.getAllRegions();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.isLoaded) this.renderGeoLocations(this.state.chart);\n  }\n\n  componentWillUnmount() {}\n\n  renderGeoLocations(chart) {\n    /*\r\n      Adding markers\r\n    */\n    let imageSeries = chart.series.push(new am4maps.MapImageSeries());\n    let imageSeriesTemplate = imageSeries.mapImages.template;\n    let circle = imageSeriesTemplate.createChild(am4core.Circle);\n    circle.radius = 4;\n    circle.fill = am4core.color(\"#B27799\");\n    circle.stroke = am4core.color(\"#FFFFFF\");\n    circle.strokeWidth = 2;\n    circle.nonScaling = true;\n    circle.tooltipText = \"{region} \\n {location}\";\n    imageSeriesTemplate.propertyFields.latitude = \"latitude\";\n    imageSeriesTemplate.propertyFields.longitude = \"longitude\";\n    let imageSeriesData = [];\n    console.log(this.state.liveRegions);\n\n    for (var liveRegion of this.state.liveRegions) {\n      imageSeriesData.push(this.azureLocations[liveRegion.GeoRegion]);\n    }\n\n    imageSeries.data = imageSeriesData;\n    this.renderGeoPairLines(chart);\n  }\n\n  renderGeoPairLines(chart) {//var lineSeries = chart.series.push(new am4maps.MapLineSeries());\n  }\n\n  getAllRegions() {\n    fetch(\"https://localhost:44303/api/region/all\").then(res => res.json()).then(result => {\n      this.setState({\n        isLoaded: true,\n        liveRegions: JSON.parse(result.content)\n      });\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"chartdiv\",\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["C:\\Users\\tekommin.REDMOND\\source\\repos\\capacity-management-ui\\src\\Map.js"],"names":["React","am4core","am4themes_animated","am4maps","am4geodata_worldLow","am4geodata_usaLow","useTheme","Map","Component","constructor","props","azureLocations","state","error","isLoaded","liveRegions","chart","componentDidMount","create","MapChart","geodata","projection","projections","Miller","worldSeries","series","push","MapPolygonSeries","useGeodata","polygonTemplate","mapPolygons","template","tooltipText","fill","colors","getIndex","nonScalingStroke","hs","states","properties","color","exclude","usaSeries","setState","getAllRegions","componentDidUpdate","prevProps","prevState","renderGeoLocations","componentWillUnmount","imageSeries","MapImageSeries","imageSeriesTemplate","mapImages","circle","createChild","Circle","radius","stroke","strokeWidth","nonScaling","propertyFields","latitude","longitude","imageSeriesData","console","log","liveRegion","GeoRegion","data","renderGeoPairLines","fetch","then","res","json","result","JSON","parse","content","render","width","height"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\r\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\r\nimport am4geodata_usaLow from \"@amcharts/amcharts4-geodata/usaLow\";\r\nam4core.useTheme(am4themes_animated);\r\n\r\n\r\nclass Map extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      liveRegions: [],\r\n      chart: null\r\n    };\r\n  }\r\n\r\n  azureLocations = {\r\n                      \"asiaeast\":      {  \"region\" : \"Region : East Asia\", \r\n                                          \"location\": \"Location : Hong Kong\",\r\n                                          \"latitude\" : 22.3193,\r\n                                          \"longitude\": 114.1694\r\n                                       },\r\n                      \"uscentral\":     { \"region\" : \"Region : Central US\", \r\n                                         \"location\": \"Location : Iowa\",\r\n                                         \"latitude\" : 42.032974,\r\n                                         \"longitude\": -95.581543\r\n                                       },\r\n                      \"usdodcentral\":  { \"region\" : \"Region : US DoD Central\", \r\n                                         \"location\": \"Location : Iowa\",\r\n                                         \"latitude\" : 42.032974,\r\n                                         \"longitude\": -93.581543\r\n                                       },\r\n                      \"asiasoutheast\": { \"region\" : \"Region : Southeast Asia\", \r\n                                         \"location\": \"Location : Singapore\",\r\n                                         \"latitude\" : 1.290270,\r\n                                         \"longitude\": 103.851959\r\n                                       },\r\n                      \"australiac\":    { \"region\" : \"Region : Australia Central\", \r\n                                         \"location\": \"Location : Canberra\",\r\n                                         \"latitude\" : -35.28346,\r\n                                         \"longitude\": 149.12807\r\n                                       },\r\n                      \"australiac2\":   { \"region\" : \"Region : Australia Central 2\", \r\n                                         \"location\": \"Location : Canberra\",\r\n                                         \"latitude\" : -36.080780,\r\n                                         \"longitude\": 146.916473\r\n                                       },\r\n                      \"australiaeast\": { \"region\" : \"Region : Australia East\", \r\n                                         \"location\": \"Location : New South Wales\",\r\n                                         \"latitude\" : -31.840233,\r\n                                         \"longitude\": 145.612793\r\n                                       }                                                                             \r\n                    }\r\n\r\n  \r\n  componentDidMount() {\r\n\r\n    let chart = am4core.create(\"chartdiv\", am4maps.MapChart);\r\n\r\n    // Set map definition\r\n    chart.geodata = am4geodata_worldLow;\r\n    \r\n    // Set projection\r\n    chart.projection = new am4maps.projections.Miller();\r\n    \r\n    // Series for World map\r\n    let worldSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    worldSeries.useGeodata = true;\r\n    \r\n    var polygonTemplate = worldSeries.mapPolygons.template;\r\n    polygonTemplate.tooltipText = \"{name}\";\r\n    polygonTemplate.fill = chart.colors.getIndex(0);\r\n    polygonTemplate.nonScalingStroke = true;\r\n    \r\n    // Hover state\r\n    let hs = polygonTemplate.states.create(\"hover\");\r\n    hs.properties.fill = am4core.color(\"#367B25\");\r\n    worldSeries.exclude = [\"AQ\"];\r\n \r\n    /**\r\n     * Series for the U.S. map\r\n     * It will use its own `geodata`\r\n     */\r\n    let usaSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    usaSeries.geodata = am4geodata_usaLow;\r\n    usaSeries.useGeodata = true;\r\n    polygonTemplate = usaSeries.mapPolygons.template;\r\n    polygonTemplate.tooltipText = \"{name}\";\r\n    polygonTemplate.fill = chart.colors.getIndex(0);\r\n    polygonTemplate.nonScalingStroke = true;\r\n\r\n    this.setState({\r\n        chart: chart\r\n    });\r\n\r\n    this.getAllRegions();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState)\r\n  {\r\n    if(this.state.isLoaded)\r\n      this.renderGeoLocations(this.state.chart);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n  \r\n  }\r\n\r\n  renderGeoLocations(chart)\r\n  {\r\n    /*\r\n      Adding markers\r\n    */\r\n    let imageSeries = chart.series.push(new am4maps.MapImageSeries());\r\n    let imageSeriesTemplate = imageSeries.mapImages.template;\r\n    let circle = imageSeriesTemplate.createChild(am4core.Circle);\r\n    circle.radius = 4;\r\n    circle.fill = am4core.color(\"#B27799\");\r\n    circle.stroke = am4core.color(\"#FFFFFF\");\r\n    circle.strokeWidth = 2;\r\n    circle.nonScaling = true;\r\n    circle.tooltipText = \"{region} \\n {location}\";\r\n\r\n    imageSeriesTemplate.propertyFields.latitude = \"latitude\";\r\n    imageSeriesTemplate.propertyFields.longitude = \"longitude\";\r\n\r\n    let imageSeriesData = [];\r\n    console.log(this.state.liveRegions);\r\n    for (var liveRegion of this.state.liveRegions)\r\n    {\r\n        imageSeriesData.push(this.azureLocations[liveRegion.GeoRegion]);\r\n    }\r\n\r\n    imageSeries.data = imageSeriesData;\r\n\r\n    this.renderGeoPairLines(chart)\r\n    \r\n  }\r\n\r\n  renderGeoPairLines(chart)\r\n  {\r\n\r\n    //var lineSeries = chart.series.push(new am4maps.MapLineSeries());\r\n\r\n  }\r\n\r\n  getAllRegions()\r\n  {\r\n    fetch(\"https://localhost:44303/api/region/all\")\r\n    .then(res => res.json())\r\n    .then(\r\n      (result) => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          liveRegions: JSON.parse(result.content)\r\n        });\r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          error\r\n        });\r\n      }\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"chartdiv\" style={{ width: \"100%\", height: \"100%\" }}></div>\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nexport default Map;"]},"metadata":{},"sourceType":"module"}
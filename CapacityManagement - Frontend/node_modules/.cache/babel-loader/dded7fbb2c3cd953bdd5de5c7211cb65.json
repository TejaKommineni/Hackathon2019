{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tekommin.REDMOND\\\\source\\\\repos\\\\capacity-management-ui\\\\src\\\\Map.js\";\nimport React from \"react\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\nimport am4geodata_usaLow from \"@amcharts/amcharts4-geodata/usaLow\";\nimport am4geodata_australiaLow from \"@amcharts/amcharts4-geodata/australiaLow\";\nimport am4geodata_chinaLow from \"@amcharts/amcharts4-geodata/chinaLow\";\nimport am4geodata_indiaLow from \"@amcharts/amcharts4-geodata/indiaLow\";\nimport am4geodata_japanLow from \"@amcharts/amcharts4-geodata/japanLow\";\nam4core.useTheme(am4themes_animated);\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.azureLocations = {\n      \"asiaeast\": {\n        \"region\": \"Region : East Asia\",\n        \"location\": \"Location : Hong Kong\",\n        \"latitude\": 22.3193,\n        \"longitude\": 114.1694\n      },\n      \"uscentral\": {\n        \"region\": \"Region : Central US\",\n        \"location\": \"Location : Iowa\",\n        \"latitude\": 42.032974,\n        \"longitude\": -95.581543\n      },\n      \"usdodcentral\": {\n        \"region\": \"Region : US DoD Central\",\n        \"location\": \"Location : Iowa\",\n        \"latitude\": 42.032974,\n        \"longitude\": -93.581543\n      },\n      \"asiasoutheast\": {\n        \"region\": \"Region : Southeast Asia\",\n        \"location\": \"Location : Singapore\",\n        \"latitude\": 1.290270,\n        \"longitude\": 103.851959\n      },\n      \"australiac\": {\n        \"region\": \"Region : Australia Central\",\n        \"location\": \"Location : Canberra\",\n        \"latitude\": -23.69748,\n        \"longitude\": 133.88362\n      },\n      \"australiac2\": {\n        \"region\": \"Region : Australia Central 2\",\n        \"location\": \"Location : Canberra\",\n        \"latitude\": -34.730194,\n        \"longitude\": 135.850479\n      },\n      \"australiaeast\": {\n        \"region\": \"Region : Australia East\",\n        \"location\": \"Location : New South Wales\",\n        \"latitude\": -27.470125,\n        \"longitude\": 153.021072\n      },\n      \"australiasoutheast\": {\n        \"region\": \"Region : Australia Southeast\",\n        \"location\": \"Location : Victoria\",\n        \"latitude\": -37.814,\n        \"longitude\": 144.96332\n      },\n      \"brazilsouth\": {\n        \"region\": \"Region : Brazil South\",\n        \"location\": \"Location : Victoria\",\n        \"latitude\": -23.533773,\n        \"longitude\": -46.625290\n      },\n      \"canadacentral\": {\n        \"region\": \"Region : Canada Central\",\n        \"location\": \"Location : Toronto\",\n        \"latitude\": 51.617,\n        \"longitude\": -85.933\n      },\n      \"canadaeast\": {\n        \"region\": \"Region : Canada East\",\n        \"location\": \"Location : Quebec City\",\n        \"latitude\": 49.6499974,\n        \"longitude\": -76.4833314\n      },\n      \"chinaeast\": {\n        \"region\": \"Region : China East\",\n        \"location\": \"Location : Shanghai\",\n        \"latitude\": 31.22222,\n        \"longitude\": 121.45806\n      },\n      \"chinae2\": {\n        \"region\": \"Region : China East 2\",\n        \"location\": \"Location : Shanghai\",\n        \"latitude\": 30.71444,\n        \"longitude\": 111.28472\n      },\n      \"chinanorth\": {\n        \"region\": \"Region : China North\",\n        \"location\": \"Location : Beijing\",\n        \"latitude\": 39.913818,\n        \"longitude\": 116.363625\n      },\n      \"chinan2\": {\n        \"region\": \"Region : China North 2\",\n        \"location\": \"Location : Beijing\",\n        \"latitude\": 38.488800,\n        \"longitude\": 106.249290\n      },\n      \"indiacentral\": {\n        \"region\": \"Region : Central India\",\n        \"location\": \"Location : Pune\",\n        \"latitude\": 28.65381,\n        \"longitude\": 77.22897\n      },\n      \"indiasouth\": {\n        \"region\": \"Region : South India\",\n        \"location\": \"Location : Chennai\",\n        \"latitude\": 13.08784,\n        \"longitude\": 80.27847\n      },\n      \"indiawest\": {\n        \"region\": \"Region : West India\",\n        \"location\": \"Location : Mumbai\",\n        \"latitude\": 19.07283,\n        \"longitude\": 72.88261\n      },\n      \"japaneast\": {\n        \"region\": \"Region : Japan East\",\n        \"location\": \"Location : Tokyo, Saitama\",\n        \"latitude\": 42.923901,\n        \"longitude\": 143.196106\n      },\n      \"japanwest\": {\n        \"region\": \"Region : Japan West\",\n        \"location\": \"Location : Osaka\",\n        \"latitude\": 34.6937378,\n        \"longitude\": 135.502165\n      },\n      \"koreacentral\": {\n        \"region\": \"Region : Korean Central\",\n        \"location\": \"Location : Seoul\",\n        \"latitude\": 39.03385,\n        \"longitude\": 125.75432\n      },\n      \"koreasouth\": {\n        \"region\": \"Region : Korea South\",\n        \"location\": \"Location : Busan\",\n        \"latitude\": 35.179554,\n        \"longitude\": 129.075642\n      },\n      \"southafricaw\": {\n        \"region\": \"Region : South Africa West\",\n        \"location\": \"Location : Cape Town\",\n        \"latitude\": -33.918861,\n        \"longitude\": 18.423300\n      },\n      \"southafrican\": {\n        \"region\": \"Region : South Africa North\",\n        \"location\": \"Location : Johannesburg\",\n        \"latitude\": -24.653257,\n        \"longitude\": 25.906792\n      }\n    };\n    this.state = {\n      error: null,\n      isLoaded: false,\n      liveRegions: [],\n      chart: null\n    };\n  }\n\n  componentDidMount() {\n    let chart = am4core.create(\"chartdiv\", am4maps.MapChart); // Set map definition\n\n    chart.geodata = am4geodata_worldLow; // Set projection\n\n    chart.projection = new am4maps.projections.Miller(); // Series for World map\n\n    let worldSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    worldSeries.useGeodata = true;\n    var polygonTemplate = worldSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0);\n    polygonTemplate.nonScalingStroke = true; // Hover state\n\n    let hs = polygonTemplate.states.create(\"hover\");\n    hs.properties.fill = am4core.color(\"#367B25\");\n    worldSeries.exclude = [\"AQ\"]; //worldSeries.exclude = [\"HK\"];\n\n    /**\r\n     * Series for the U.S. map\r\n     * It will use its own `geodata`\r\n     */\n\n    let usaSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    usaSeries.geodata = am4geodata_usaLow;\n    usaSeries.useGeodata = true;\n    polygonTemplate = usaSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0);\n    polygonTemplate.nonScalingStroke = true;\n    /**\r\n    * Series for the Australia Map\r\n    * It will use its own `geodata`\r\n    */\n\n    let australiaSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    australiaSeries.geodata = am4geodata_australiaLow;\n    australiaSeries.useGeodata = true;\n    polygonTemplate = australiaSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0);\n    polygonTemplate.nonScalingStroke = true;\n    /**\r\n     * Series for the China Map\r\n     * It will use its own `geodata`\r\n     */\n\n    let chinaSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    chinaSeries.geodata = am4geodata_chinaLow;\n    chinaSeries.useGeodata = true;\n    polygonTemplate = chinaSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0);\n    polygonTemplate.nonScalingStroke = true;\n    /**\r\n     * Series for the India Map\r\n     * It will use its own `geodata`\r\n     */\n\n    let indiaSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    indiaSeries.geodata = am4geodata_indiaLow;\n    indiaSeries.useGeodata = true;\n    polygonTemplate = indiaSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0);\n    polygonTemplate.nonScalingStroke = true;\n    /**\r\n     * Series for the Japan Map\r\n     * It will use its own `geodata`\r\n     */\n\n    let japanSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    japanSeries.geodata = am4geodata_japanLow;\n    japanSeries.useGeodata = true;\n    polygonTemplate = japanSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0);\n    polygonTemplate.nonScalingStroke = true;\n    this.setState({\n      chart: chart\n    });\n    this.getAllRegions();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.isLoaded) this.renderGeoLocations(this.state.chart);\n  }\n\n  componentWillUnmount() {}\n\n  renderGeoLocations(chart) {\n    /*\r\n      Adding markers\r\n    */\n    let imageSeries = chart.series.push(new am4maps.MapImageSeries());\n    let imageSeriesTemplate = imageSeries.mapImages.template;\n    let circle = imageSeriesTemplate.createChild(am4core.Circle);\n    circle.radius = 2;\n    circle.fill = am4core.color(\"#B27799\");\n    circle.stroke = am4core.color(\"#FFFFFF\");\n    circle.strokeWidth = 1;\n    circle.nonScaling = true;\n    circle.tooltipText = \"{region} \\n {location}\";\n    imageSeriesTemplate.propertyFields.latitude = \"latitude\";\n    imageSeriesTemplate.propertyFields.longitude = \"longitude\";\n    let imageSeriesData = [];\n    console.log(this.state.liveRegions);\n\n    for (var liveRegion of this.state.liveRegions) {\n      imageSeriesData.push(this.azureLocations[liveRegion.GeoRegion]);\n    }\n\n    imageSeries.data = imageSeriesData;\n    this.renderGeoPairLines(chart);\n  }\n\n  renderGeoPairLines(chart) {//var lineSeries = chart.series.push(new am4maps.MapLineSeries());\n  }\n\n  getAllRegions() {\n    fetch(\"https://localhost:44303/api/region/all\").then(res => res.json()).then(result => {\n      this.setState({\n        isLoaded: true,\n        liveRegions: JSON.parse(result.content)\n      });\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"chartdiv\",\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["C:\\Users\\tekommin.REDMOND\\source\\repos\\capacity-management-ui\\src\\Map.js"],"names":["React","am4core","am4themes_animated","am4maps","am4geodata_worldLow","am4geodata_usaLow","am4geodata_australiaLow","am4geodata_chinaLow","am4geodata_indiaLow","am4geodata_japanLow","useTheme","Map","Component","constructor","props","azureLocations","state","error","isLoaded","liveRegions","chart","componentDidMount","create","MapChart","geodata","projection","projections","Miller","worldSeries","series","push","MapPolygonSeries","useGeodata","polygonTemplate","mapPolygons","template","tooltipText","fill","colors","getIndex","nonScalingStroke","hs","states","properties","color","exclude","usaSeries","australiaSeries","chinaSeries","indiaSeries","japanSeries","setState","getAllRegions","componentDidUpdate","prevProps","prevState","renderGeoLocations","componentWillUnmount","imageSeries","MapImageSeries","imageSeriesTemplate","mapImages","circle","createChild","Circle","radius","stroke","strokeWidth","nonScaling","propertyFields","latitude","longitude","imageSeriesData","console","log","liveRegion","GeoRegion","data","renderGeoPairLines","fetch","then","res","json","result","JSON","parse","content","render","width","height"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\r\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\r\nimport am4geodata_usaLow from \"@amcharts/amcharts4-geodata/usaLow\";\r\nimport am4geodata_australiaLow from \"@amcharts/amcharts4-geodata/australiaLow\";\r\nimport am4geodata_chinaLow from \"@amcharts/amcharts4-geodata/chinaLow\";\r\nimport am4geodata_indiaLow from \"@amcharts/amcharts4-geodata/indiaLow\";\r\nimport am4geodata_japanLow from \"@amcharts/amcharts4-geodata/japanLow\";\r\nam4core.useTheme(am4themes_animated);\r\n\r\n\r\nclass Map extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      liveRegions: [],\r\n      chart: null\r\n    };\r\n  }\r\n\r\n  azureLocations = {\r\n                      \"asiaeast\":      {  \"region\" : \"Region : East Asia\", \r\n                                          \"location\": \"Location : Hong Kong\",\r\n                                          \"latitude\" : 22.3193,\r\n                                          \"longitude\": 114.1694\r\n                                       },\r\n                      \"uscentral\":     { \"region\" : \"Region : Central US\", \r\n                                         \"location\": \"Location : Iowa\",\r\n                                         \"latitude\" : 42.032974,\r\n                                         \"longitude\": -95.581543\r\n                                       },\r\n                      \"usdodcentral\":  { \"region\" : \"Region : US DoD Central\", \r\n                                         \"location\": \"Location : Iowa\",\r\n                                         \"latitude\" : 42.032974,\r\n                                         \"longitude\": -93.581543\r\n                                       },\r\n                      \"asiasoutheast\": { \"region\" : \"Region : Southeast Asia\", \r\n                                         \"location\": \"Location : Singapore\",\r\n                                         \"latitude\" : 1.290270,\r\n                                         \"longitude\": 103.851959\r\n                                       },\r\n                      \"australiac\":    { \"region\" : \"Region : Australia Central\", \r\n                                         \"location\": \"Location : Canberra\",\r\n                                         \"latitude\" : -23.69748,\r\n                                         \"longitude\": 133.88362\r\n                                       },\r\n                      \"australiac2\":   { \"region\" : \"Region : Australia Central 2\", \r\n                                         \"location\": \"Location : Canberra\",\r\n                                         \"latitude\" : -34.730194,\r\n                                         \"longitude\": 135.850479\r\n                                       },\r\n                      \"australiaeast\": { \"region\" : \"Region : Australia East\", \r\n                                         \"location\": \"Location : New South Wales\",\r\n                                         \"latitude\" : -27.470125,\r\n                                         \"longitude\": 153.021072\r\n                                       },\r\n                      \"australiasoutheast\": { \"region\" : \"Region : Australia Southeast\", \r\n                                              \"location\": \"Location : Victoria\",\r\n                                              \"latitude\" : -37.814,\r\n                                              \"longitude\": 144.96332\r\n                                            },\r\n                      \"brazilsouth\":    { \"region\" : \"Region : Brazil South\", \r\n                                            \"location\": \"Location : Victoria\",\r\n                                            \"latitude\" : -23.533773,\r\n                                            \"longitude\": -46.625290\r\n                                        },\r\n                      \"canadacentral\":  { \r\n                                        \"region\" : \"Region : Canada Central\", \r\n                                        \"location\": \"Location : Toronto\",\r\n                                        \"latitude\" : 51.617,\r\n                                        \"longitude\": -85.933\r\n                                        },\r\n                      \"canadaeast\":     { \r\n                                          \"region\" : \"Region : Canada East\", \r\n                                          \"location\": \"Location : Quebec City\",\r\n                                          \"latitude\" : 49.6499974,\r\n                                          \"longitude\": -76.4833314\r\n                                        },\r\n                      \"chinaeast\":     { \r\n                                          \"region\" : \"Region : China East\", \r\n                                          \"location\": \"Location : Shanghai\",\r\n                                          \"latitude\" : 31.22222,\r\n                                          \"longitude\": 121.45806\r\n                                       },\r\n                      \"chinae2\":       {  \r\n                                          \"region\" : \"Region : China East 2\", \r\n                                          \"location\": \"Location : Shanghai\",\r\n                                          \"latitude\" : 30.71444,\r\n                                          \"longitude\": 111.28472\r\n                                       },\r\n                      \"chinanorth\":    { \r\n                                        \"region\" : \"Region : China North\", \r\n                                        \"location\": \"Location : Beijing\",\r\n                                        \"latitude\" : 39.913818,\r\n                                        \"longitude\": 116.363625\r\n                                     },\r\n                      \"chinan2\":     {  \r\n                                        \"region\" : \"Region : China North 2\", \r\n                                        \"location\": \"Location : Beijing\",\r\n                                        \"latitude\" : 38.488800,\r\n                                        \"longitude\": 106.249290\r\n                                     },\r\n                      \"indiacentral\":{  \r\n                                      \"region\" : \"Region : Central India\", \r\n                                      \"location\": \"Location : Pune\",\r\n                                      \"latitude\" : 28.65381,\r\n                                      \"longitude\": 77.22897\r\n                                     },\r\n                      \"indiasouth\":  { \r\n                                      \"region\" : \"Region : South India\", \r\n                                      \"location\": \"Location : Chennai\",\r\n                                      \"latitude\" : 13.08784,\r\n                                      \"longitude\": 80.27847\r\n                                     },\r\n                      \"indiawest\":   {  \r\n                                      \"region\" : \"Region : West India\", \r\n                                      \"location\": \"Location : Mumbai\",\r\n                                      \"latitude\" : 19.07283,\r\n                                      \"longitude\": 72.88261\r\n                                     },\r\n                      \"japaneast\":  { \r\n                                      \"region\" : \"Region : Japan East\", \r\n                                      \"location\": \"Location : Tokyo, Saitama\",\r\n                                      \"latitude\" : 42.923901,\r\n                                      \"longitude\": 143.196106\r\n                                    },\r\n                      \"japanwest\":   {  \r\n                                      \"region\" : \"Region : Japan West\", \r\n                                      \"location\": \"Location : Osaka\",\r\n                                      \"latitude\" : 34.6937378,\r\n                                      \"longitude\": 135.502165\r\n                                     },\r\n                      \"koreacentral\":{ \r\n                                      \"region\" : \"Region : Korean Central\", \r\n                                      \"location\": \"Location : Seoul\",\r\n                                      \"latitude\" : 39.03385,\r\n                                      \"longitude\": 125.75432\r\n                                    },\r\n                      \"koreasouth\": { \r\n                                      \"region\" : \"Region : Korea South\", \r\n                                      \"location\": \"Location : Busan\",\r\n                                      \"latitude\" : 35.179554,\r\n                                      \"longitude\": 129.075642\r\n                                     },\r\n                      \"southafricaw\":{ \r\n                                      \"region\" : \"Region : South Africa West\", \r\n                                      \"location\": \"Location : Cape Town\",\r\n                                      \"latitude\" : -33.918861,\r\n                                      \"longitude\": 18.423300\r\n                                    },\r\n                      \"southafrican\": { \r\n                                      \"region\" : \"Region : South Africa North\", \r\n                                      \"location\": \"Location : Johannesburg\",\r\n                                      \"latitude\" : -24.653257,\r\n                                      \"longitude\": 25.906792\r\n                                     }\r\n\r\n                                                                                                                    \r\n                    }\r\n\r\n  \r\n  componentDidMount() {\r\n\r\n    let chart = am4core.create(\"chartdiv\", am4maps.MapChart);\r\n\r\n    // Set map definition\r\n    chart.geodata = am4geodata_worldLow;\r\n    \r\n    // Set projection\r\n    chart.projection = new am4maps.projections.Miller();\r\n    \r\n    // Series for World map\r\n    let worldSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    worldSeries.useGeodata = true;\r\n    \r\n    var polygonTemplate = worldSeries.mapPolygons.template;\r\n    polygonTemplate.tooltipText = \"{name}\";\r\n    polygonTemplate.fill = chart.colors.getIndex(0);\r\n    polygonTemplate.nonScalingStroke = true;\r\n    \r\n    // Hover state\r\n    let hs = polygonTemplate.states.create(\"hover\");\r\n    hs.properties.fill = am4core.color(\"#367B25\");\r\n    worldSeries.exclude = [\"AQ\"];\r\n    //worldSeries.exclude = [\"HK\"];\r\n\r\n    /**\r\n     * Series for the U.S. map\r\n     * It will use its own `geodata`\r\n     */\r\n    let usaSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    usaSeries.geodata = am4geodata_usaLow;\r\n    usaSeries.useGeodata = true;\r\n    polygonTemplate = usaSeries.mapPolygons.template;\r\n    polygonTemplate.tooltipText = \"{name}\";\r\n    polygonTemplate.fill = chart.colors.getIndex(0);\r\n    polygonTemplate.nonScalingStroke = true;\r\n\r\n\r\n     /**\r\n     * Series for the Australia Map\r\n     * It will use its own `geodata`\r\n     */\r\n    let australiaSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    australiaSeries.geodata = am4geodata_australiaLow;\r\n    australiaSeries.useGeodata = true;\r\n    polygonTemplate = australiaSeries.mapPolygons.template;\r\n    polygonTemplate.tooltipText = \"{name}\";\r\n    polygonTemplate.fill = chart.colors.getIndex(0);\r\n    polygonTemplate.nonScalingStroke = true;\r\n\r\n    /**\r\n     * Series for the China Map\r\n     * It will use its own `geodata`\r\n     */\r\n    let chinaSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    chinaSeries.geodata = am4geodata_chinaLow;\r\n    chinaSeries.useGeodata = true;\r\n    polygonTemplate = chinaSeries.mapPolygons.template;\r\n    polygonTemplate.tooltipText = \"{name}\";\r\n    polygonTemplate.fill = chart.colors.getIndex(0);\r\n    polygonTemplate.nonScalingStroke = true;\r\n\r\n    /**\r\n     * Series for the India Map\r\n     * It will use its own `geodata`\r\n     */\r\n    let indiaSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    indiaSeries.geodata = am4geodata_indiaLow;\r\n    indiaSeries.useGeodata = true;\r\n    polygonTemplate = indiaSeries.mapPolygons.template;\r\n    polygonTemplate.tooltipText = \"{name}\";\r\n    polygonTemplate.fill = chart.colors.getIndex(0);\r\n    polygonTemplate.nonScalingStroke = true;\r\n\r\n    /**\r\n     * Series for the Japan Map\r\n     * It will use its own `geodata`\r\n     */\r\n    let japanSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    japanSeries.geodata = am4geodata_japanLow;\r\n    japanSeries.useGeodata = true;\r\n    polygonTemplate = japanSeries.mapPolygons.template;\r\n    polygonTemplate.tooltipText = \"{name}\";\r\n    polygonTemplate.fill = chart.colors.getIndex(0);\r\n    polygonTemplate.nonScalingStroke = true;\r\n\r\n\r\n    this.setState({\r\n        chart: chart\r\n    });\r\n\r\n    this.getAllRegions();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState)\r\n  {\r\n    if(this.state.isLoaded)\r\n      this.renderGeoLocations(this.state.chart);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n  \r\n  }\r\n\r\n  renderGeoLocations(chart)\r\n  {\r\n    /*\r\n      Adding markers\r\n    */\r\n    let imageSeries = chart.series.push(new am4maps.MapImageSeries());\r\n    let imageSeriesTemplate = imageSeries.mapImages.template;\r\n    let circle = imageSeriesTemplate.createChild(am4core.Circle);\r\n    circle.radius = 2;\r\n    circle.fill = am4core.color(\"#B27799\");\r\n    circle.stroke = am4core.color(\"#FFFFFF\");\r\n    circle.strokeWidth = 1;\r\n    circle.nonScaling = true;\r\n    circle.tooltipText = \"{region} \\n {location}\";\r\n\r\n    imageSeriesTemplate.propertyFields.latitude = \"latitude\";\r\n    imageSeriesTemplate.propertyFields.longitude = \"longitude\";\r\n\r\n    let imageSeriesData = [];\r\n    console.log(this.state.liveRegions);\r\n    for (var liveRegion of this.state.liveRegions)\r\n    {\r\n        imageSeriesData.push(this.azureLocations[liveRegion.GeoRegion]);\r\n    }\r\n\r\n    imageSeries.data = imageSeriesData;\r\n\r\n    this.renderGeoPairLines(chart)\r\n    \r\n  }\r\n\r\n  renderGeoPairLines(chart)\r\n  {\r\n\r\n    //var lineSeries = chart.series.push(new am4maps.MapLineSeries());\r\n\r\n  }\r\n\r\n  getAllRegions()\r\n  {\r\n    fetch(\"https://localhost:44303/api/region/all\")\r\n    .then(res => res.json())\r\n    .then(\r\n      (result) => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          liveRegions: JSON.parse(result.content)\r\n        });\r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          error\r\n        });\r\n      }\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"chartdiv\" style={{ width: \"100%\", height: \"100%\" }}></div>\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nexport default Map;"]},"metadata":{},"sourceType":"module"}
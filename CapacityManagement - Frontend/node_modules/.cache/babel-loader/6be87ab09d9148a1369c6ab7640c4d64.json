{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tekommin.REDMOND\\\\source\\\\repos\\\\capacity-management-ui\\\\src\\\\Map.js\";\nimport React from \"react\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\nam4core.useTheme(am4themes_animated);\n\nclass Map extends React.Component {\n  componentDidMount() {\n    let chart = am4core.create(\"chartdiv\", am4maps.MapChart); // Set map definition\n\n    chart.geodata = am4geodata_worldLow; // Set projection\n\n    chart.projection = new am4maps.projections.Miller(); // Series for World map\n\n    let worldSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    worldSeries.exclude = [\"AQ\"];\n    worldSeries.useGeodata = true;\n    let polygonTemplate = worldSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0);\n    polygonTemplate.nonScalingStroke = true; // Hover state\n\n    let hs = polygonTemplate.states.create(\"hover\");\n    hs.properties.fill = am4core.color(\"#367B25\"); // Series for United States map\n\n    let usaSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    usaSeries.geodata = am4geodata_usaLow;\n    let usPolygonTemplate = usaSeries.mapPolygons.template;\n    usPolygonTemplate.tooltipText = \"{name}\";\n    usPolygonTemplate.fill = chart.colors.getIndex(1);\n    usPolygonTemplate.nonScalingStroke = true; // Hover state\n\n    hs = usPolygonTemplate.states.create(\"hover\");\n    hs.properties.fill = am4core.color(\"#367B25\");\n  }\n\n  componentWillUnmount() {}\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"chartdiv\",\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["C:\\Users\\tekommin.REDMOND\\source\\repos\\capacity-management-ui\\src\\Map.js"],"names":["React","am4core","am4themes_animated","am4maps","am4geodata_worldLow","useTheme","Map","Component","componentDidMount","chart","create","MapChart","geodata","projection","projections","Miller","worldSeries","series","push","MapPolygonSeries","exclude","useGeodata","polygonTemplate","mapPolygons","template","tooltipText","fill","colors","getIndex","nonScalingStroke","hs","states","properties","color","usaSeries","am4geodata_usaLow","usPolygonTemplate","componentWillUnmount","render","width","height"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,OAAZ,MAAyB,0BAAzB;AACA,OAAOC,kBAAP,MAA+B,qCAA/B;AACA,OAAO,KAAKC,OAAZ,MAAyB,0BAAzB;AACA,OAAOC,mBAAP,MAAgC,sCAAhC;AACAH,OAAO,CAACI,QAAR,CAAiBH,kBAAjB;;AAGA,MAAMI,GAAN,SAAkBN,KAAK,CAACO,SAAxB,CAAkC;AAEhCC,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,KAAK,GAAGR,OAAO,CAACS,MAAR,CAAe,UAAf,EAA2BP,OAAO,CAACQ,QAAnC,CAAZ,CADkB,CAGlB;;AACAF,IAAAA,KAAK,CAACG,OAAN,GAAgBR,mBAAhB,CAJkB,CAMlB;;AACAK,IAAAA,KAAK,CAACI,UAAN,GAAmB,IAAIV,OAAO,CAACW,WAAR,CAAoBC,MAAxB,EAAnB,CAPkB,CASlB;;AACA,QAAIC,WAAW,GAAGP,KAAK,CAACQ,MAAN,CAAaC,IAAb,CAAkB,IAAIf,OAAO,CAACgB,gBAAZ,EAAlB,CAAlB;AACAH,IAAAA,WAAW,CAACI,OAAZ,GAAsB,CAAC,IAAD,CAAtB;AACAJ,IAAAA,WAAW,CAACK,UAAZ,GAAyB,IAAzB;AAEA,QAAIC,eAAe,GAAGN,WAAW,CAACO,WAAZ,CAAwBC,QAA9C;AACAF,IAAAA,eAAe,CAACG,WAAhB,GAA8B,QAA9B;AACAH,IAAAA,eAAe,CAACI,IAAhB,GAAuBjB,KAAK,CAACkB,MAAN,CAAaC,QAAb,CAAsB,CAAtB,CAAvB;AACAN,IAAAA,eAAe,CAACO,gBAAhB,GAAmC,IAAnC,CAjBkB,CAmBlB;;AACA,QAAIC,EAAE,GAAGR,eAAe,CAACS,MAAhB,CAAuBrB,MAAvB,CAA8B,OAA9B,CAAT;AACAoB,IAAAA,EAAE,CAACE,UAAH,CAAcN,IAAd,GAAqBzB,OAAO,CAACgC,KAAR,CAAc,SAAd,CAArB,CArBkB,CAuBlB;;AACA,QAAIC,SAAS,GAAGzB,KAAK,CAACQ,MAAN,CAAaC,IAAb,CAAkB,IAAIf,OAAO,CAACgB,gBAAZ,EAAlB,CAAhB;AACAe,IAAAA,SAAS,CAACtB,OAAV,GAAoBuB,iBAApB;AAEA,QAAIC,iBAAiB,GAAGF,SAAS,CAACX,WAAV,CAAsBC,QAA9C;AACAY,IAAAA,iBAAiB,CAACX,WAAlB,GAAgC,QAAhC;AACAW,IAAAA,iBAAiB,CAACV,IAAlB,GAAyBjB,KAAK,CAACkB,MAAN,CAAaC,QAAb,CAAsB,CAAtB,CAAzB;AACAQ,IAAAA,iBAAiB,CAACP,gBAAlB,GAAqC,IAArC,CA9BkB,CAgClB;;AACAC,IAAAA,EAAE,GAAGM,iBAAiB,CAAEL,MAAnB,CAA0BrB,MAA1B,CAAiC,OAAjC,CAAL;AACAoB,IAAAA,EAAE,CAACE,UAAH,CAAcN,IAAd,GAAqBzB,OAAO,CAACgC,KAAR,CAAc,SAAd,CAArB;AACD;;AAEDI,EAAAA,oBAAoB,GAAG,CAEtB;;AAEDC,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,EAAE,EAAC,UAAR;AAAmB,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,MAAM,EAAE;AAAzB,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;;AA/C+B;;AAqDlC,eAAelC,GAAf","sourcesContent":["import React from \"react\";\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\r\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\r\nam4core.useTheme(am4themes_animated);\r\n\r\n\r\nclass Map extends React.Component {\r\n\r\n  componentDidMount() {\r\n    let chart = am4core.create(\"chartdiv\", am4maps.MapChart);\r\n\r\n    // Set map definition\r\n    chart.geodata = am4geodata_worldLow;\r\n    \r\n    // Set projection\r\n    chart.projection = new am4maps.projections.Miller();\r\n    \r\n    // Series for World map\r\n    let worldSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    worldSeries.exclude = [\"AQ\"];\r\n    worldSeries.useGeodata = true;\r\n    \r\n    let polygonTemplate = worldSeries.mapPolygons.template;\r\n    polygonTemplate.tooltipText = \"{name}\";\r\n    polygonTemplate.fill = chart.colors.getIndex(0);\r\n    polygonTemplate.nonScalingStroke = true;\r\n    \r\n    // Hover state\r\n    let hs = polygonTemplate.states.create(\"hover\");\r\n    hs.properties.fill = am4core.color(\"#367B25\");\r\n    \r\n    // Series for United States map\r\n    let usaSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    usaSeries.geodata = am4geodata_usaLow;\r\n    \r\n    let usPolygonTemplate = usaSeries.mapPolygons.template;\r\n    usPolygonTemplate.tooltipText = \"{name}\";\r\n    usPolygonTemplate.fill = chart.colors.getIndex(1);\r\n    usPolygonTemplate.nonScalingStroke = true;\r\n    \r\n    // Hover state\r\n    hs = usPolygonTemplate .states.create(\"hover\");\r\n    hs.properties.fill = am4core.color(\"#367B25\");\r\n  }\r\n\r\n  componentWillUnmount() {\r\n  \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"chartdiv\" style={{ width: \"100%\", height: \"100%\" }}></div>\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nexport default Map;"]},"metadata":{},"sourceType":"module"}
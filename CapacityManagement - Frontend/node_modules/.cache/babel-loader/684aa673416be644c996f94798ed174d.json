{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tekommin.REDMOND\\\\source\\\\repos\\\\capacity-management-ui\\\\src\\\\Map.js\";\nimport React from \"react\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\nimport am4geodata_usaLow from \"@amcharts/amcharts4-geodata/usaLow\";\nimport am4geodata_australiaLow from \"@amcharts/amcharts4-geodata/australiaLow\";\nimport am4geodata_chinaLow from \"@amcharts/amcharts4-geodata/chinaLow\";\nimport am4geodata_indiaLow from \"@amcharts/amcharts4-geodata/indiaLow\";\nimport am4geodata_japanLow from \"@amcharts/amcharts4-geodata/japanLow\";\nimport am4geodata_canadaLow from \"@amcharts/amcharts4-geodata/canadaLow\";\nimport am4geodata_ukLow from \"@amcharts/amcharts4-geodata/ukLow\";\nimport azureLocations from './AzureLocations.json';\nam4core.useTheme(am4themes_animated);\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.azureLocations = azureLocations;\n    this.state = {\n      error: null,\n      isLoaded: false,\n      liveRegions: [],\n      chart: null\n    };\n  }\n\n  componentDidMount() {\n    let chart = am4core.create(\"chartdiv\", am4maps.MapChart); // Set map definition\n\n    chart.geodata = am4geodata_worldLow; // Set projection\n\n    chart.projection = new am4maps.projections.Miller(); // Series for World map\n\n    let worldSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    worldSeries.useGeodata = true;\n    var polygonTemplate = worldSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0);\n    polygonTemplate.nonScalingStroke = true; // Hover state\n\n    let hs = polygonTemplate.states.create(\"hover\");\n    hs.properties.fill = am4core.color(\"#367B25\");\n    worldSeries.exclude = [\"AQ\"]; //worldSeries.exclude = [\"HK\"];\n\n    polygonTemplate.events.on(\"hit\", function (event) {\n      console.log(chart.zoomLevel);\n      console.log(chart.zoomGeoPoint);\n    });\n    /**\r\n     * Series for the U.S. map\r\n     * It will use its own `geodata`\r\n     */\n\n    let usaSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    usaSeries.geodata = am4geodata_usaLow;\n    usaSeries.useGeodata = true;\n    polygonTemplate = usaSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0);\n    polygonTemplate.nonScalingStroke = true;\n    /**\r\n    * Series for the Australia Map\r\n    * It will use its own `geodata`\r\n    */\n\n    let australiaSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    australiaSeries.geodata = am4geodata_australiaLow;\n    australiaSeries.useGeodata = true;\n    polygonTemplate = australiaSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0);\n    polygonTemplate.nonScalingStroke = true;\n    /**\r\n     * Series for the China Map\r\n     * It will use its own `geodata`\r\n     */\n\n    let chinaSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    chinaSeries.geodata = am4geodata_chinaLow;\n    chinaSeries.useGeodata = true;\n    polygonTemplate = chinaSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0);\n    polygonTemplate.nonScalingStroke = true;\n    /**\r\n     * Series for the India Map\r\n     * It will use its own `geodata`\r\n     */\n\n    let indiaSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    indiaSeries.geodata = am4geodata_indiaLow;\n    indiaSeries.useGeodata = true;\n    polygonTemplate = indiaSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0);\n    polygonTemplate.nonScalingStroke = true;\n    /**\r\n     * Series for the Japan Map\r\n     * It will use its own `geodata`\r\n     */\n\n    let japanSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    japanSeries.geodata = am4geodata_japanLow;\n    japanSeries.useGeodata = true;\n    polygonTemplate = japanSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0);\n    polygonTemplate.nonScalingStroke = true;\n    /**\r\n     * Series for the Canada Map\r\n     * It will use its own `geodata`\r\n     */\n\n    let canadaSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    canadaSeries.geodata = am4geodata_canadaLow;\n    canadaSeries.useGeodata = true;\n    polygonTemplate = canadaSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0);\n    polygonTemplate.nonScalingStroke = true;\n    /**\r\n    * Series for the UK Map\r\n    * It will use its own `geodata`\r\n    */\n\n    let ukSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    ukSeries.geodata = am4geodata_ukLow;\n    ukSeries.useGeodata = true;\n    polygonTemplate = ukSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0);\n    polygonTemplate.nonScalingStroke = true;\n    this.setState({\n      chart: chart\n    });\n    this.getAllRegions();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.isLoaded) this.renderMap(this.state.chart);\n  }\n\n  componentWillUnmount() {}\n\n  renderMap(chart) {\n    this.updateAzureLocations();\n    this.renderGeoLocations(chart);\n    this.renderGeoPairLines(chart);\n    this.includeExcludeGeoLocations(chart);\n    this.applyHeatLegend(chart);\n  }\n\n  updateAzureLocations() {\n    for (var liveRegion of this.state.liveRegions) {\n      let temp = this.azureLocations[liveRegion.GeoRegion];\n\n      if (temp != undefined) {\n        temp['ENUtilization'] = \"ENUtilization : \" + liveRegion.ENUtilization;\n        temp['SellableCapacity'] = \"SellableCapacity : \" + liveRegion.SellableCapacity;\n        this.azureLocations[liveRegion.GeoRegion] = temp;\n      }\n    }\n  }\n\n  renderGeoLocations(chart) {\n    /*\r\n      Adding markers\r\n    */\n    let imageSeries = chart.series.push(new am4maps.MapImageSeries());\n    let imageSeriesTemplate = imageSeries.mapImages.template;\n    let circle = imageSeriesTemplate.createChild(am4core.Circle);\n    circle.radius = 3;\n    circle.fill = am4core.color(\"#221177\");\n    circle.stroke = am4core.color(\"#FFFFFF\");\n    circle.strokeWidth = 1;\n    circle.nonScaling = true;\n    circle.tooltipText = \"{region} \\n {location} \\n {ENUtilization} \\n {SellableCapacity}\";\n    imageSeriesTemplate.propertyFields.latitude = \"latitude\";\n    imageSeriesTemplate.propertyFields.longitude = \"longitude\";\n    let imageSeriesData = [];\n    console.log(this.state.liveRegions);\n\n    for (var liveRegion of this.state.liveRegions) {\n      imageSeriesData.push(this.azureLocations[liveRegion.GeoRegion]);\n    }\n\n    imageSeries.data = imageSeriesData;\n    this.renderGeoPairLines(chart);\n  }\n\n  renderGeoPairLines(chart) {\n    var lineSeries = chart.series.push(new am4maps.MapArcSeries());\n    let lineSeriesTemplate = lineSeries.mapLines.template;\n    lineSeriesTemplate.shortestDistance = true;\n    lineSeriesTemplate.line.strokeWidth = 1;\n    lineSeriesTemplate.line.stroke = am4core.color(\"#2277AA\");\n    lineSeriesTemplate.line.strokeOpacity = 0.8;\n    lineSeriesTemplate.line.controlPointDistance = 0.5;\n    let drawnRegions = [];\n    let drawnLines = [];\n\n    for (var liveRegion of this.state.liveRegions) {\n      let drawnLine = false;\n      var i = 0;\n\n      for (; i < drawnRegions.length; i++) {\n        var temp = drawnRegions[i];\n\n        if (temp.toString() === [liveRegion.GeoPairRegion, liveRegion.GeoRegion].toString()) {\n          drawnLine = true;\n          break;\n        }\n      }\n\n      if (liveRegion.GeoRegion in this.azureLocations && !drawnLine) {\n        var line = lineSeries.mapLines.create();\n        line.multiGeoLine = [[{\n          \"latitude\": this.azureLocations[liveRegion.GeoRegion].latitude,\n          \"longitude\": this.azureLocations[liveRegion.GeoRegion].longitude\n        }, {\n          \"latitude\": this.azureLocations[liveRegion.GeoPairRegion].latitude,\n          \"longitude\": this.azureLocations[liveRegion.GeoPairRegion].longitude\n        }]];\n        var bullet = line.lineObjects.create();\n        bullet.position = 0.1;\n        var arrow = bullet.createChild(am4core.Triangle);\n        arrow.horizontalCenter = \"middle\";\n        arrow.verticalCenter = \"middle\";\n        arrow.stroke = am4core.color(\"#fff\");\n        arrow.opacity = 0.2;\n        arrow.direction = \"left\";\n        arrow.width = 5;\n        arrow.height = 5;\n        var labelBullet = line.lineObjects.create();\n        labelBullet = bullet.createChild(am4core.Label);\n        labelBullet.position = 0.1;\n        labelBullet.text = liveRegion.NumberOfPrimaryTenants; //labelBullet.dy = -20;\n\n        labelBullet.fontSize = 6;\n        labelBullet.strokeWidth = 0;\n        labelBullet.align = \"center\";\n        labelBullet.valign = \"middle\";\n        labelBullet.zIndex = 2; //labelBullet.fill = am4core.color(\"#000\");\n\n        drawnRegions.push([liveRegion.GeoRegion, liveRegion.GeoPairRegion]);\n        drawnLines.push(line);\n      }\n\n      if (drawnLine) {\n        var line = drawnLines[i];\n        var bullet = line.lineObjects.create();\n        bullet.position = 0.9;\n        var arrow = bullet.createChild(am4core.Triangle);\n        arrow.horizontalCenter = \"middle\";\n        arrow.verticalCenter = \"middle\";\n        arrow.stroke = am4core.color(\"#fff\");\n        arrow.direction = \"left\";\n        arrow.opacity = 0.2;\n        arrow.width = 5;\n        arrow.height = 5;\n        var labelBullet = line.lineObjects.create();\n        labelBullet = bullet.createChild(am4core.Label);\n        labelBullet.position = 0.9;\n        labelBullet.text = liveRegion.NumberOfPrimaryTenants; // labelBullet.dy = -20;\n\n        labelBullet.fontSize = 6;\n        labelBullet.align = \"center\";\n        labelBullet.valign = \"middle\";\n        labelBullet.zIndex = 2;\n        labelBullet.fill = am4core.color(\"#000\");\n        labelBullet.strokeWidth = 0;\n        console.log(liveRegion.GeoRegion);\n      }\n    }\n  }\n\n  includeExcludeGeoLocations(chart) {\n    if (this.props.isGeographical) this.renderSelectedRegions(chart);\n  }\n\n  renderSelectedRegions(chart) {\n    let worldSeries = chart.series.getIndex(0);\n    console.log(this.props.geographyType);\n\n    if (this.props.geographyType === \"Americas\") {\n      //chart.events.on(\"ready\", function(ev) {\n      chart.zoomToGeoPoint({\n        longitude: -96.700470,\n        latitude: 40.820744\n      }, 2.4, true); //});  \n    }\n\n    if (this.props.geographyType === \"Asia Pacific\") {\n      // chart.zoomToMapObject(worldSeries.getPolygonById(\"AU\"));\n      //chart.events.on(\"ready\", function(ev) {\n      chart.zoomToGeoPoint({\n        longitude: 125.560310,\n        latitude: -8.556856\n      }, 1.8, true); //});  \n    }\n\n    if (this.props.geographyType === \"Europe\") {\n      chart.zoomToGeoPoint({\n        longitude: 19.040236,\n        latitude: 47.497913\n      }, 2.5, true);\n    }\n\n    if (this.props.geographyType === \"Middle East And Africa\") {\n      chart.zoomToGeoPoint({\n        longitude: 32.582520,\n        latitude: 0.347596\n      }, 2.3, true);\n    }\n\n    if (this.props.geographyType === \"Azure Government\") {\n      //chart.events.on(\"ready\", function(ev) {\n      chart.zoomToGeoPoint({\n        longitude: -96.700470,\n        latitude: 40.820744\n      }, 2.4, true); //});  \n    }\n  }\n\n  applyHeatLegend(chart) {\n    for (var liveRegion of this.state.liveRegions) {\n      let temp = this.azureLocations[liveRegion.GeoRegion];\n\n      if (temp != undefined) {\n        temp['ENUtilization'] = \"ENUtilization : \" + liveRegion.ENUtilization;\n        temp['SellableCapacity'] = \"SellableCapacity : \" + liveRegion.SellableCapacity;\n        this.azureLocations[liveRegion.GeoRegion] = temp;\n      }\n    }\n  }\n\n  getAllRegions() {\n    fetch(\"https://localhost:44313/api/region/all\").then(res => res.json()).then(result => {\n      this.setState({\n        isLoaded: true,\n        liveRegions: JSON.parse(result.content)\n      });\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      this.setState({\n        isLoaded: true,\n        //error, \n        liveRegions: JSON.parse(\"[\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"australiac\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"australiac2\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 2,\\r\\n    \\\"ENUtilization\\\": 0.208483348233176,\\r\\n    \\\"SellableCapacity\\\": 644.94294564057\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"australiac2\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"australiac\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 2,\\r\\n    \\\"ENUtilization\\\": 0.0586621270155971,\\r\\n    \\\"SellableCapacity\\\": 493.289798403138\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"brazilsouth\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"ussouth\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 6,\\r\\n    \\\"ENUtilization\\\": 0.775476686102462,\\r\\n    \\\"SellableCapacity\\\": 3769.76232511305\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"canadacentral\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"canadaeast\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 4,\\r\\n    \\\"ENUtilization\\\": 0.943524117314294,\\r\\n    \\\"SellableCapacity\\\": 6793.80509998425\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"canadaeast\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"canadacentral\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 5,\\r\\n    \\\"ENUtilization\\\": 0.813267518612624,\\r\\n    \\\"SellableCapacity\\\": 2498.53923262245\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"chinae2\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"chinan2\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 2,\\r\\n    \\\"ENUtilization\\\": 0.566955499576575,\\r\\n    \\\"SellableCapacity\\\": 1724.68001584696\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"chinaeast\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"chinanorth\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 5,\\r\\n    \\\"ENUtilization\\\": 0.891916381884191,\\r\\n    \\\"SellableCapacity\\\": 945.051607694957\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"chinan2\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"chinae2\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 2,\\r\\n    \\\"ENUtilization\\\": 0.294359833491395,\\r\\n    \\\"SellableCapacity\\\": 1682.87665093896\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"chinanorth\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"chinaeast\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 4,\\r\\n    \\\"ENUtilization\\\": 0.691214354153298,\\r\\n    \\\"SellableCapacity\\\": 1654.85621606493\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"francec\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"frances\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 3,\\r\\n    \\\"ENUtilization\\\": 0.445165423570173,\\r\\n    \\\"SellableCapacity\\\": 2623.81100258523\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"frances\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"francec\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 2,\\r\\n    \\\"ENUtilization\\\": 0.059123451511421,\\r\\n    \\\"SellableCapacity\\\": 203.251442207814\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"germanycentral\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"germanynortheast\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 2,\\r\\n    \\\"ENUtilization\\\": 0.857563859109647,\\r\\n    \\\"SellableCapacity\\\": 614.826767759962\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"germanynortheast\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"germanycentral\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 2,\\r\\n    \\\"ENUtilization\\\": 0.0461923118297349,\\r\\n    \\\"SellableCapacity\\\": 848.895981805965\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"indiacentral\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"indiasouth\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 4,\\r\\n    \\\"ENUtilization\\\": 0.730136077068479,\\r\\n    \\\"SellableCapacity\\\": 2827.20058064175\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"indiasouth\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"indiawest\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 0,\\r\\n    \\\"ENUtilization\\\": 0.816637773662781,\\r\\n    \\\"SellableCapacity\\\": 2001.45559950469\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"indiawest\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"indiasouth\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 2,\\r\\n    \\\"ENUtilization\\\": 0.410628798247011,\\r\\n    \\\"SellableCapacity\\\": 934.506603978812\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"southafrican\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"southafricaw\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 2,\\r\\n    \\\"ENUtilization\\\": 0.134186046219755,\\r\\n    \\\"SellableCapacity\\\": 2672.50103570642\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"southafricaw\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"southafrican\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 2,\\r\\n    \\\"ENUtilization\\\": 0.0381876826280233,\\r\\n    \\\"SellableCapacity\\\": 206.325781740209\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"uaec\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"uaen\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 1,\\r\\n    \\\"ENUtilization\\\": 0.0141212514678577,\\r\\n    \\\"SellableCapacity\\\": 454.049986194211\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"uaen\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"uaec\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 1,\\r\\n    \\\"ENUtilization\\\": 0.027962622898678,\\r\\n    \\\"SellableCapacity\\\": 1543.68867709364\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"uknorth\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"uksouth2\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 1,\\r\\n    \\\"ENUtilization\\\": 0.0119724314972421,\\r\\n    \\\"SellableCapacity\\\": 7.82254374525901\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"uksouth2\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"uknorth\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 1,\\r\\n    \\\"ENUtilization\\\": 0.0135352148724654,\\r\\n    \\\"SellableCapacity\\\": 10.209162471288\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"usdodcentral\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"usdodeast\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 2,\\r\\n    \\\"ENUtilization\\\": 0.041278756160273,\\r\\n    \\\"SellableCapacity\\\": 1180.43159710423\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"usdodeast\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"usdodcentral\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 2,\\r\\n    \\\"ENUtilization\\\": 0.0861484673288668,\\r\\n    \\\"SellableCapacity\\\": 1390.90186367764\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"usgovcentral\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"usgoveast\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 2,\\r\\n    \\\"ENUtilization\\\": 0.011456262764907,\\r\\n    \\\"SellableCapacity\\\": 209.511329136319\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"usgoveast\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"usgovsc\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 4,\\r\\n    \\\"ENUtilization\\\": 0.542724737790691,\\r\\n    \\\"SellableCapacity\\\": 4260.69300819793\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"usgovsc\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"usgoveast\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 0,\\r\\n    \\\"ENUtilization\\\": 0.280627190035987,\\r\\n    \\\"SellableCapacity\\\": 1956.8749298145\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"usgovsw\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"usgovsc\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 2,\\r\\n    \\\"ENUtilization\\\": 0.284270976242665,\\r\\n    \\\"SellableCapacity\\\": 1939.77064261243\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"asiaeast\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"asiasoutheast\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 6,\\r\\n    \\\"ENUtilization\\\": 0.0302875685908995,\\r\\n    \\\"SellableCapacity\\\": 491.564276108871\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"uswestcentral\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"uswest2\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 4,\\r\\n    \\\"ENUtilization\\\": 0.716588784492345,\\r\\n    \\\"SellableCapacity\\\": 2671.81040389655\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"asiasoutheast\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"asiaeast\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 10,\\r\\n    \\\"ENUtilization\\\": 0.034108864206031,\\r\\n    \\\"SellableCapacity\\\": 2087.22254701645\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"australiaeast\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"australiasoutheast\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 8,\\r\\n    \\\"ENUtilization\\\": 0.0167604651927587,\\r\\n    \\\"SellableCapacity\\\": 363.010030916258\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"australiasoutheast\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"australiaeast\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 5,\\r\\n    \\\"ENUtilization\\\": 0.00212156206528699,\\r\\n    \\\"SellableCapacity\\\": 237.802885405986\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"europenorth\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"europewest\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 33,\\r\\n    \\\"ENUtilization\\\": 0.0204784087457139,\\r\\n    \\\"SellableCapacity\\\": 3792.83655503403\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"europewest\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"europenorth\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 41,\\r\\n    \\\"ENUtilization\\\": 0.0529731951020039,\\r\\n    \\\"SellableCapacity\\\": 3841.00328972\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"japaneast\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"japanwest\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 9,\\r\\n    \\\"ENUtilization\\\": 0.00969253403362828,\\r\\n    \\\"SellableCapacity\\\": 82.3035149407501\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"japanwest\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"japaneast\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 6,\\r\\n    \\\"ENUtilization\\\": 0.00123861572087686,\\r\\n    \\\"SellableCapacity\\\": 37.3169666191327\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"koreacentral\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"koreasouth\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 4,\\r\\n    \\\"ENUtilization\\\": 0.00679117617607222,\\r\\n    \\\"SellableCapacity\\\": 109.163925046689\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"koreasouth\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"koreacentral\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 2,\\r\\n    \\\"ENUtilization\\\": 0.00120590780653358,\\r\\n    \\\"SellableCapacity\\\": 0.909192357241401\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"uksouth\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"ukwest\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 11,\\r\\n    \\\"ENUtilization\\\": 0.00644543482613813,\\r\\n    \\\"SellableCapacity\\\": 644.478026330003\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"ukwest\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"uksouth\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 7,\\r\\n    \\\"ENUtilization\\\": 0.0262338574433504,\\r\\n    \\\"SellableCapacity\\\": 86.3514983164546\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"uscentral\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"useast2\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 34,\\r\\n    \\\"ENUtilization\\\": 0.0727404602267561,\\r\\n    \\\"SellableCapacity\\\": 1853.39635878111\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"useast\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"uswest\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 25,\\r\\n    \\\"ENUtilization\\\": 0.0525802008852354,\\r\\n    \\\"SellableCapacity\\\": 5135.53511614083\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"useast2\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"uscentral\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 26,\\r\\n    \\\"ENUtilization\\\": 0.295348621191383,\\r\\n    \\\"SellableCapacity\\\": 545.838852007845\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"usnorth\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"ussouth\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 12,\\r\\n    \\\"ENUtilization\\\": 0.00337434804663391,\\r\\n    \\\"SellableCapacity\\\": 341.657928715764\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"ussouth\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"usnorth\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 19,\\r\\n    \\\"ENUtilization\\\": 0.00402904962531911,\\r\\n    \\\"SellableCapacity\\\": 4251.11234609315\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"uswest\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"useast\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 21,\\r\\n    \\\"ENUtilization\\\": 0.0157692967989874,\\r\\n    \\\"SellableCapacity\\\": 5993.55428069778\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"uswest2\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"uswestcentral\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 7,\\r\\n    \\\"ENUtilization\\\": 0.254786900449981,\\r\\n    \\\"SellableCapacity\\\": 1605.33664601758\\r\\n  }\\r\\n]\")\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"chartdiv\",\n      style: {\n        paddingLeft: 0,\n        paddingRight: 0,\n        height: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["C:\\Users\\tekommin.REDMOND\\source\\repos\\capacity-management-ui\\src\\Map.js"],"names":["React","am4core","am4themes_animated","am4maps","am4charts","am4geodata_worldLow","am4geodata_usaLow","am4geodata_australiaLow","am4geodata_chinaLow","am4geodata_indiaLow","am4geodata_japanLow","am4geodata_canadaLow","am4geodata_ukLow","azureLocations","useTheme","Map","Component","constructor","props","state","error","isLoaded","liveRegions","chart","componentDidMount","create","MapChart","geodata","projection","projections","Miller","worldSeries","series","push","MapPolygonSeries","useGeodata","polygonTemplate","mapPolygons","template","tooltipText","fill","colors","getIndex","nonScalingStroke","hs","states","properties","color","exclude","events","on","event","console","log","zoomLevel","zoomGeoPoint","usaSeries","australiaSeries","chinaSeries","indiaSeries","japanSeries","canadaSeries","ukSeries","setState","getAllRegions","componentDidUpdate","prevProps","prevState","renderMap","componentWillUnmount","updateAzureLocations","renderGeoLocations","renderGeoPairLines","includeExcludeGeoLocations","applyHeatLegend","liveRegion","temp","GeoRegion","undefined","ENUtilization","SellableCapacity","imageSeries","MapImageSeries","imageSeriesTemplate","mapImages","circle","createChild","Circle","radius","stroke","strokeWidth","nonScaling","propertyFields","latitude","longitude","imageSeriesData","data","lineSeries","MapArcSeries","lineSeriesTemplate","mapLines","shortestDistance","line","strokeOpacity","controlPointDistance","drawnRegions","drawnLines","drawnLine","i","length","toString","GeoPairRegion","multiGeoLine","bullet","lineObjects","position","arrow","Triangle","horizontalCenter","verticalCenter","opacity","direction","width","height","labelBullet","Label","text","NumberOfPrimaryTenants","fontSize","align","valign","zIndex","isGeographical","renderSelectedRegions","geographyType","zoomToGeoPoint","fetch","then","res","json","result","JSON","parse","content","render","paddingLeft","paddingRight"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\r\nimport am4geodata_usaLow from \"@amcharts/amcharts4-geodata/usaLow\";\r\nimport am4geodata_australiaLow from \"@amcharts/amcharts4-geodata/australiaLow\";\r\nimport am4geodata_chinaLow from \"@amcharts/amcharts4-geodata/chinaLow\";\r\nimport am4geodata_indiaLow from \"@amcharts/amcharts4-geodata/indiaLow\";\r\nimport am4geodata_japanLow from \"@amcharts/amcharts4-geodata/japanLow\";\r\nimport am4geodata_canadaLow from \"@amcharts/amcharts4-geodata/canadaLow\";\r\nimport am4geodata_ukLow from \"@amcharts/amcharts4-geodata/ukLow\";\r\nimport azureLocations from './AzureLocations.json';\r\nam4core.useTheme(am4themes_animated);\r\n\r\n\r\nclass Map extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      liveRegions: [],\r\n      chart: null\r\n    };    \r\n  }\r\n  \r\n  azureLocations = azureLocations;\r\n  \r\n  componentDidMount() {\r\n\r\n    let chart = am4core.create(\"chartdiv\", am4maps.MapChart);\r\n\r\n    // Set map definition\r\n    chart.geodata = am4geodata_worldLow;\r\n    \r\n    // Set projection\r\n    chart.projection = new am4maps.projections.Miller();\r\n    \r\n    // Series for World map\r\n    let worldSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    worldSeries.useGeodata = true;\r\n    \r\n    var polygonTemplate = worldSeries.mapPolygons.template;\r\n    polygonTemplate.tooltipText = \"{name}\";\r\n    polygonTemplate.fill = chart.colors.getIndex(0);\r\n    polygonTemplate.nonScalingStroke = true;\r\n    \r\n    // Hover state\r\n    let hs = polygonTemplate.states.create(\"hover\");\r\n    hs.properties.fill = am4core.color(\"#367B25\");\r\n    worldSeries.exclude = [\"AQ\"];\r\n    //worldSeries.exclude = [\"HK\"];\r\n\r\n    polygonTemplate.events.on(\"hit\", function (event) {\r\n      console.log(chart.zoomLevel);\r\n      console.log(chart.zoomGeoPoint);\r\n    })\r\n\r\n    /**\r\n     * Series for the U.S. map\r\n     * It will use its own `geodata`\r\n     */\r\n    let usaSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    usaSeries.geodata = am4geodata_usaLow;\r\n    usaSeries.useGeodata = true;\r\n    polygonTemplate = usaSeries.mapPolygons.template;\r\n    polygonTemplate.tooltipText = \"{name}\";\r\n    polygonTemplate.fill = chart.colors.getIndex(0);\r\n    polygonTemplate.nonScalingStroke = true;\r\n\r\n\r\n     /**\r\n     * Series for the Australia Map\r\n     * It will use its own `geodata`\r\n     */\r\n    let australiaSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    australiaSeries.geodata = am4geodata_australiaLow;\r\n    australiaSeries.useGeodata = true;\r\n    polygonTemplate = australiaSeries.mapPolygons.template;\r\n    polygonTemplate.tooltipText = \"{name}\";\r\n    polygonTemplate.fill = chart.colors.getIndex(0);\r\n    polygonTemplate.nonScalingStroke = true;\r\n\r\n    /**\r\n     * Series for the China Map\r\n     * It will use its own `geodata`\r\n     */\r\n    let chinaSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    chinaSeries.geodata = am4geodata_chinaLow;\r\n    chinaSeries.useGeodata = true;\r\n    polygonTemplate = chinaSeries.mapPolygons.template;\r\n    polygonTemplate.tooltipText = \"{name}\";\r\n    polygonTemplate.fill = chart.colors.getIndex(0);\r\n    polygonTemplate.nonScalingStroke = true;\r\n\r\n    /**\r\n     * Series for the India Map\r\n     * It will use its own `geodata`\r\n     */\r\n    let indiaSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    indiaSeries.geodata = am4geodata_indiaLow;\r\n    indiaSeries.useGeodata = true;\r\n    polygonTemplate = indiaSeries.mapPolygons.template;\r\n    polygonTemplate.tooltipText = \"{name}\";\r\n    polygonTemplate.fill = chart.colors.getIndex(0);\r\n    polygonTemplate.nonScalingStroke = true;\r\n\r\n    /**\r\n     * Series for the Japan Map\r\n     * It will use its own `geodata`\r\n     */\r\n    let japanSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    japanSeries.geodata = am4geodata_japanLow;\r\n    japanSeries.useGeodata = true;\r\n    polygonTemplate = japanSeries.mapPolygons.template;\r\n    polygonTemplate.tooltipText = \"{name}\";\r\n    polygonTemplate.fill = chart.colors.getIndex(0);\r\n    polygonTemplate.nonScalingStroke = true;\r\n\r\n    /**\r\n     * Series for the Canada Map\r\n     * It will use its own `geodata`\r\n     */\r\n    let canadaSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    canadaSeries.geodata = am4geodata_canadaLow;\r\n    canadaSeries.useGeodata = true;\r\n    polygonTemplate = canadaSeries.mapPolygons.template;\r\n    polygonTemplate.tooltipText = \"{name}\";\r\n    polygonTemplate.fill = chart.colors.getIndex(0);\r\n    polygonTemplate.nonScalingStroke = true;\r\n\r\n        /**\r\n     * Series for the UK Map\r\n     * It will use its own `geodata`\r\n     */\r\n    let ukSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    ukSeries.geodata = am4geodata_ukLow;\r\n    ukSeries.useGeodata = true;\r\n    polygonTemplate = ukSeries.mapPolygons.template;\r\n    polygonTemplate.tooltipText = \"{name}\";\r\n    polygonTemplate.fill = chart.colors.getIndex(0);\r\n    polygonTemplate.nonScalingStroke = true;\r\n\r\n    this.setState({\r\n        chart: chart\r\n    });\r\n\r\n    this.getAllRegions();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState)\r\n  {\r\n    if(this.state.isLoaded)\r\n      this.renderMap(this.state.chart);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n  \r\n  }\r\n  \r\n  renderMap(chart)\r\n  {\r\n    this.updateAzureLocations();\r\n    this.renderGeoLocations(chart);\r\n    this.renderGeoPairLines(chart);\r\n    this.includeExcludeGeoLocations(chart);\r\n    this.applyHeatLegend(chart);\r\n  }\r\n\r\n  updateAzureLocations()\r\n  {\r\n    for (var liveRegion of this.state.liveRegions)\r\n    {\r\n        let temp = this.azureLocations[liveRegion.GeoRegion];\r\n        if(temp != undefined)\r\n        {\r\n          temp['ENUtilization'] = \"ENUtilization : \" + liveRegion.ENUtilization;\r\n          temp['SellableCapacity'] = \"SellableCapacity : \" + liveRegion.SellableCapacity;\r\n          this.azureLocations[liveRegion.GeoRegion] = temp;\r\n        }\r\n    }\r\n  }\r\n\r\n  renderGeoLocations(chart)\r\n  {\r\n    /*\r\n      Adding markers\r\n    */\r\n    let imageSeries = chart.series.push(new am4maps.MapImageSeries());\r\n    let imageSeriesTemplate = imageSeries.mapImages.template;\r\n    let circle = imageSeriesTemplate.createChild(am4core.Circle);\r\n    circle.radius = 3;\r\n    circle.fill = am4core.color(\"#221177\");\r\n    circle.stroke = am4core.color(\"#FFFFFF\");\r\n    circle.strokeWidth = 1;\r\n    circle.nonScaling = true;\r\n    circle.tooltipText = \"{region} \\n {location} \\n {ENUtilization} \\n {SellableCapacity}\";\r\n\r\n    imageSeriesTemplate.propertyFields.latitude = \"latitude\";\r\n    imageSeriesTemplate.propertyFields.longitude = \"longitude\";\r\n\r\n    let imageSeriesData = [];\r\n    console.log(this.state.liveRegions);\r\n    for (var liveRegion of this.state.liveRegions)\r\n    {\r\n        imageSeriesData.push(this.azureLocations[liveRegion.GeoRegion]);\r\n    }\r\n\r\n    imageSeries.data = imageSeriesData;\r\n\r\n    this.renderGeoPairLines(chart);\r\n    \r\n  }\r\n\r\n  renderGeoPairLines(chart)\r\n  {\r\n    var lineSeries = chart.series.push(new am4maps.MapArcSeries());\r\n    let lineSeriesTemplate = lineSeries.mapLines.template;\r\n    lineSeriesTemplate.shortestDistance = true;\r\n    lineSeriesTemplate.line.strokeWidth = 1;\r\n    lineSeriesTemplate.line.stroke = am4core.color(\"#2277AA\");\r\n    lineSeriesTemplate.line.strokeOpacity = 0.8;    \r\n    lineSeriesTemplate.line.controlPointDistance = 0.5;\r\n\r\n    let drawnRegions = [];\r\n    let drawnLines = [];\r\n    for (var liveRegion of this.state.liveRegions)\r\n    { \r\n      let drawnLine = false;\r\n      var i=0;\r\n      for(; i<drawnRegions.length; i++)\r\n      { \r\n        var temp = drawnRegions[i];\r\n        if(temp.toString() === [liveRegion.GeoPairRegion, liveRegion.GeoRegion].toString())\r\n        {\r\n          drawnLine = true;\r\n          break;\r\n        }\r\n      }\r\n      if(liveRegion.GeoRegion in this.azureLocations &&  !drawnLine)\r\n      {\r\n        var line = lineSeries.mapLines.create();\r\n        line.multiGeoLine = [[\r\n          {\"latitude\" : this.azureLocations[liveRegion.GeoRegion].latitude,\r\n          \"longitude\" : this.azureLocations[liveRegion.GeoRegion].longitude},\r\n          {\"latitude\" : this.azureLocations[liveRegion.GeoPairRegion].latitude,\r\n          \"longitude\" : this.azureLocations[liveRegion.GeoPairRegion].longitude}\r\n        ]];\r\n        var bullet = line.lineObjects.create();\r\n        bullet.position = 0.1;\r\n        var arrow = bullet.createChild(am4core.Triangle);\r\n        arrow.horizontalCenter = \"middle\";\r\n        arrow.verticalCenter = \"middle\";\r\n        arrow.stroke = am4core.color(\"#fff\");\r\n        arrow.opacity = 0.2;\r\n        arrow.direction = \"left\";\r\n        arrow.width = 5;\r\n        arrow.height = 5;\r\n\r\n      \r\n        var labelBullet = line.lineObjects.create();\r\n        labelBullet = bullet.createChild(am4core.Label);\r\n        labelBullet.position = 0.1;\r\n        labelBullet.text = liveRegion.NumberOfPrimaryTenants;\r\n        //labelBullet.dy = -20;\r\n        labelBullet.fontSize = 6;\r\n        labelBullet.strokeWidth = 0;\r\n\r\n        labelBullet.align = \"center\";\r\n        labelBullet.valign = \"middle\";\r\n        labelBullet.zIndex = 2;\r\n        //labelBullet.fill = am4core.color(\"#000\");\r\n        \r\n\r\n        \r\n        drawnRegions.push([liveRegion.GeoRegion, liveRegion.GeoPairRegion]); \r\n        drawnLines.push(line);\r\n      }\r\n      if (drawnLine)\r\n      {\r\n        var line = drawnLines[i];\r\n        var bullet = line.lineObjects.create();\r\n        bullet.position = 0.9;\r\n        var arrow = bullet.createChild(am4core.Triangle);\r\n        arrow.horizontalCenter = \"middle\";\r\n        arrow.verticalCenter = \"middle\";\r\n        arrow.stroke = am4core.color(\"#fff\");\r\n        arrow.direction = \"left\";\r\n        arrow.opacity = 0.2;\r\n        arrow.width = 5;\r\n        arrow.height = 5;\r\n\r\n      \r\n        var labelBullet = line.lineObjects.create();\r\n        labelBullet = bullet.createChild(am4core.Label);\r\n        labelBullet.position = 0.9;\r\n        labelBullet.text = liveRegion.NumberOfPrimaryTenants;\r\n       // labelBullet.dy = -20;\r\n        labelBullet.fontSize = 6;\r\n        labelBullet.align = \"center\";\r\n        labelBullet.valign = \"middle\";\r\n        labelBullet.zIndex = 2;\r\n        labelBullet.fill = am4core.color(\"#000\");\r\n        labelBullet.strokeWidth = 0;\r\n        console.log(liveRegion.GeoRegion);\r\n      }\r\n    }\r\n  }\r\n\r\n  includeExcludeGeoLocations(chart)\r\n  {\r\n      if(this.props.isGeographical)\r\n          this.renderSelectedRegions(chart);\r\n  }\r\n\r\n  renderSelectedRegions(chart)\r\n  {\r\n      let worldSeries = chart.series.getIndex(0);\r\n      console.log(this.props.geographyType);\r\n      if(this.props.geographyType === \"Americas\")\r\n      {\r\n        //chart.events.on(\"ready\", function(ev) {\r\n          chart.zoomToGeoPoint({longitude: -96.700470, latitude:  40.820744}, 2.4, true);       \r\n        //});  \r\n      }\r\n      if(this.props.geographyType === \"Asia Pacific\")\r\n      {\r\n       // chart.zoomToMapObject(worldSeries.getPolygonById(\"AU\"));\r\n                //chart.events.on(\"ready\", function(ev) {\r\n                  chart.zoomToGeoPoint({longitude: 125.560310, latitude:  -8.556856}, 1.8, true);                      \r\n                   \r\n                  //});  \r\n\r\n      }\r\n      if(this.props.geographyType === \"Europe\")\r\n      {\r\n        chart.zoomToGeoPoint({longitude: 19.040236, latitude:   47.497913}, 2.5, true); \r\n      }\r\n      if(this.props.geographyType === \"Middle East And Africa\")\r\n      {\r\n        chart.zoomToGeoPoint({longitude: 32.582520, latitude: 0.347596}, 2.3, true);\r\n      }\r\n      if(this.props.geographyType === \"Azure Government\")\r\n      {\r\n        //chart.events.on(\"ready\", function(ev) {\r\n          chart.zoomToGeoPoint({longitude: -96.700470, latitude:  40.820744}, 2.4, true);       \r\n        //});  \r\n      }\r\n  }\r\n\r\n  applyHeatLegend(chart)\r\n  {\r\n    for (var liveRegion of this.state.liveRegions)\r\n    {\r\n        let temp = this.azureLocations[liveRegion.GeoRegion];\r\n        if(temp != undefined)\r\n        {\r\n          temp['ENUtilization'] = \"ENUtilization : \" + liveRegion.ENUtilization;\r\n          temp['SellableCapacity'] = \"SellableCapacity : \" + liveRegion.SellableCapacity;\r\n          this.azureLocations[liveRegion.GeoRegion] = temp;\r\n        }\r\n    }\r\n  }\r\n  getAllRegions()\r\n  {\r\n    fetch(\"https://localhost:44313/api/region/all\")\r\n    .then(res => res.json())\r\n    .then(\r\n      (result) => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          liveRegions: JSON.parse(result.content)\r\n        });\r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          //error, \r\n          liveRegions: JSON.parse(\"[\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"australiac\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"australiac2\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 2,\\r\\n    \\\"ENUtilization\\\": 0.208483348233176,\\r\\n    \\\"SellableCapacity\\\": 644.94294564057\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"australiac2\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"australiac\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 2,\\r\\n    \\\"ENUtilization\\\": 0.0586621270155971,\\r\\n    \\\"SellableCapacity\\\": 493.289798403138\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"brazilsouth\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"ussouth\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 6,\\r\\n    \\\"ENUtilization\\\": 0.775476686102462,\\r\\n    \\\"SellableCapacity\\\": 3769.76232511305\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"canadacentral\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"canadaeast\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 4,\\r\\n    \\\"ENUtilization\\\": 0.943524117314294,\\r\\n    \\\"SellableCapacity\\\": 6793.80509998425\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"canadaeast\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"canadacentral\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 5,\\r\\n    \\\"ENUtilization\\\": 0.813267518612624,\\r\\n    \\\"SellableCapacity\\\": 2498.53923262245\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"chinae2\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"chinan2\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 2,\\r\\n    \\\"ENUtilization\\\": 0.566955499576575,\\r\\n    \\\"SellableCapacity\\\": 1724.68001584696\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"chinaeast\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"chinanorth\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 5,\\r\\n    \\\"ENUtilization\\\": 0.891916381884191,\\r\\n    \\\"SellableCapacity\\\": 945.051607694957\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"chinan2\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"chinae2\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 2,\\r\\n    \\\"ENUtilization\\\": 0.294359833491395,\\r\\n    \\\"SellableCapacity\\\": 1682.87665093896\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"chinanorth\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"chinaeast\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 4,\\r\\n    \\\"ENUtilization\\\": 0.691214354153298,\\r\\n    \\\"SellableCapacity\\\": 1654.85621606493\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"francec\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"frances\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 3,\\r\\n    \\\"ENUtilization\\\": 0.445165423570173,\\r\\n    \\\"SellableCapacity\\\": 2623.81100258523\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"frances\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"francec\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 2,\\r\\n    \\\"ENUtilization\\\": 0.059123451511421,\\r\\n    \\\"SellableCapacity\\\": 203.251442207814\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"germanycentral\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"germanynortheast\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 2,\\r\\n    \\\"ENUtilization\\\": 0.857563859109647,\\r\\n    \\\"SellableCapacity\\\": 614.826767759962\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"germanynortheast\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"germanycentral\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 2,\\r\\n    \\\"ENUtilization\\\": 0.0461923118297349,\\r\\n    \\\"SellableCapacity\\\": 848.895981805965\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"indiacentral\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"indiasouth\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 4,\\r\\n    \\\"ENUtilization\\\": 0.730136077068479,\\r\\n    \\\"SellableCapacity\\\": 2827.20058064175\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"indiasouth\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"indiawest\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 0,\\r\\n    \\\"ENUtilization\\\": 0.816637773662781,\\r\\n    \\\"SellableCapacity\\\": 2001.45559950469\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"indiawest\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"indiasouth\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 2,\\r\\n    \\\"ENUtilization\\\": 0.410628798247011,\\r\\n    \\\"SellableCapacity\\\": 934.506603978812\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"southafrican\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"southafricaw\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 2,\\r\\n    \\\"ENUtilization\\\": 0.134186046219755,\\r\\n    \\\"SellableCapacity\\\": 2672.50103570642\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"southafricaw\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"southafrican\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 2,\\r\\n    \\\"ENUtilization\\\": 0.0381876826280233,\\r\\n    \\\"SellableCapacity\\\": 206.325781740209\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"uaec\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"uaen\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 1,\\r\\n    \\\"ENUtilization\\\": 0.0141212514678577,\\r\\n    \\\"SellableCapacity\\\": 454.049986194211\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"uaen\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"uaec\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 1,\\r\\n    \\\"ENUtilization\\\": 0.027962622898678,\\r\\n    \\\"SellableCapacity\\\": 1543.68867709364\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"uknorth\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"uksouth2\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 1,\\r\\n    \\\"ENUtilization\\\": 0.0119724314972421,\\r\\n    \\\"SellableCapacity\\\": 7.82254374525901\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"uksouth2\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"uknorth\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 1,\\r\\n    \\\"ENUtilization\\\": 0.0135352148724654,\\r\\n    \\\"SellableCapacity\\\": 10.209162471288\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"usdodcentral\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"usdodeast\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 2,\\r\\n    \\\"ENUtilization\\\": 0.041278756160273,\\r\\n    \\\"SellableCapacity\\\": 1180.43159710423\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"usdodeast\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"usdodcentral\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 2,\\r\\n    \\\"ENUtilization\\\": 0.0861484673288668,\\r\\n    \\\"SellableCapacity\\\": 1390.90186367764\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"usgovcentral\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"usgoveast\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 2,\\r\\n    \\\"ENUtilization\\\": 0.011456262764907,\\r\\n    \\\"SellableCapacity\\\": 209.511329136319\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"usgoveast\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"usgovsc\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 4,\\r\\n    \\\"ENUtilization\\\": 0.542724737790691,\\r\\n    \\\"SellableCapacity\\\": 4260.69300819793\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"usgovsc\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"usgoveast\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 0,\\r\\n    \\\"ENUtilization\\\": 0.280627190035987,\\r\\n    \\\"SellableCapacity\\\": 1956.8749298145\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"usgovsw\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"usgovsc\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 2,\\r\\n    \\\"ENUtilization\\\": 0.284270976242665,\\r\\n    \\\"SellableCapacity\\\": 1939.77064261243\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"asiaeast\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"asiasoutheast\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 6,\\r\\n    \\\"ENUtilization\\\": 0.0302875685908995,\\r\\n    \\\"SellableCapacity\\\": 491.564276108871\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"uswestcentral\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"uswest2\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 4,\\r\\n    \\\"ENUtilization\\\": 0.716588784492345,\\r\\n    \\\"SellableCapacity\\\": 2671.81040389655\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"asiasoutheast\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"asiaeast\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 10,\\r\\n    \\\"ENUtilization\\\": 0.034108864206031,\\r\\n    \\\"SellableCapacity\\\": 2087.22254701645\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"australiaeast\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"australiasoutheast\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 8,\\r\\n    \\\"ENUtilization\\\": 0.0167604651927587,\\r\\n    \\\"SellableCapacity\\\": 363.010030916258\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"australiasoutheast\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"australiaeast\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 5,\\r\\n    \\\"ENUtilization\\\": 0.00212156206528699,\\r\\n    \\\"SellableCapacity\\\": 237.802885405986\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"europenorth\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"europewest\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 33,\\r\\n    \\\"ENUtilization\\\": 0.0204784087457139,\\r\\n    \\\"SellableCapacity\\\": 3792.83655503403\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"europewest\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"europenorth\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 41,\\r\\n    \\\"ENUtilization\\\": 0.0529731951020039,\\r\\n    \\\"SellableCapacity\\\": 3841.00328972\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"japaneast\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"japanwest\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 9,\\r\\n    \\\"ENUtilization\\\": 0.00969253403362828,\\r\\n    \\\"SellableCapacity\\\": 82.3035149407501\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"japanwest\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"japaneast\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 6,\\r\\n    \\\"ENUtilization\\\": 0.00123861572087686,\\r\\n    \\\"SellableCapacity\\\": 37.3169666191327\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"koreacentral\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"koreasouth\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 4,\\r\\n    \\\"ENUtilization\\\": 0.00679117617607222,\\r\\n    \\\"SellableCapacity\\\": 109.163925046689\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"koreasouth\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"koreacentral\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 2,\\r\\n    \\\"ENUtilization\\\": 0.00120590780653358,\\r\\n    \\\"SellableCapacity\\\": 0.909192357241401\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"uksouth\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"ukwest\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 11,\\r\\n    \\\"ENUtilization\\\": 0.00644543482613813,\\r\\n    \\\"SellableCapacity\\\": 644.478026330003\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"ukwest\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"uksouth\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 7,\\r\\n    \\\"ENUtilization\\\": 0.0262338574433504,\\r\\n    \\\"SellableCapacity\\\": 86.3514983164546\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"uscentral\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"useast2\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 34,\\r\\n    \\\"ENUtilization\\\": 0.0727404602267561,\\r\\n    \\\"SellableCapacity\\\": 1853.39635878111\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"useast\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"uswest\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 25,\\r\\n    \\\"ENUtilization\\\": 0.0525802008852354,\\r\\n    \\\"SellableCapacity\\\": 5135.53511614083\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"useast2\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"uscentral\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 26,\\r\\n    \\\"ENUtilization\\\": 0.295348621191383,\\r\\n    \\\"SellableCapacity\\\": 545.838852007845\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"usnorth\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"ussouth\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 12,\\r\\n    \\\"ENUtilization\\\": 0.00337434804663391,\\r\\n    \\\"SellableCapacity\\\": 341.657928715764\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"ussouth\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"usnorth\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 19,\\r\\n    \\\"ENUtilization\\\": 0.00402904962531911,\\r\\n    \\\"SellableCapacity\\\": 4251.11234609315\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"uswest\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"useast\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 21,\\r\\n    \\\"ENUtilization\\\": 0.0157692967989874,\\r\\n    \\\"SellableCapacity\\\": 5993.55428069778\\r\\n  },\\r\\n  {\\r\\n    \\\"GeoRegion\\\": \\\"uswest2\\\",\\r\\n    \\\"GeoPairRegion\\\": \\\"uswestcentral\\\",\\r\\n    \\\"NumberOfPrimaryTenants\\\": 7,\\r\\n    \\\"ENUtilization\\\": 0.254786900449981,\\r\\n    \\\"SellableCapacity\\\": 1605.33664601758\\r\\n  }\\r\\n]\")\r\n        });\r\n      }\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"chartdiv\" style={{ paddingLeft: 0, paddingRight: 0, height: \"100%\" }}></div>\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nexport default Map;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tekommin.REDMOND\\\\source\\\\repos\\\\capacity-management-ui\\\\src\\\\Map.js\";\nimport React from \"react\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\nimport am4geodata_usaLow from \"@amcharts/amcharts4-geodata/usaLow\";\nimport am4geodata_australiaLow from \"@amcharts/amcharts4-geodata/australiaLow\";\nimport am4geodata_chinaLow from \"@amcharts/amcharts4-geodata/chinaLow\";\nimport am4geodata_indiaLow from \"@amcharts/amcharts4-geodata/indiaLow\";\nimport am4geodata_japanLow from \"@amcharts/amcharts4-geodata/japanLow\";\nimport am4geodata_canadaLow from \"@amcharts/amcharts4-geodata/canadaLow\";\nimport am4geodata_ukLow from \"@amcharts/amcharts4-geodata/ukLow\";\nimport azureLocations from './AzureLocations.json';\nam4core.useTheme(am4themes_animated);\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.azureLocations = azureLocations;\n    this.state = {\n      error: null,\n      isLoaded: false,\n      liveRegions: [],\n      chart: null\n    };\n  }\n\n  componentDidMount() {\n    let chart = am4core.create(\"chartdiv\", am4maps.MapChart); // Set map definition\n\n    chart.geodata = am4geodata_worldLow; // Set projection\n\n    chart.projection = new am4maps.projections.Miller(); // Series for World map\n\n    let worldSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    worldSeries.useGeodata = true;\n    var polygonTemplate = worldSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0);\n    polygonTemplate.nonScalingStroke = true; // Hover state\n\n    let hs = polygonTemplate.states.create(\"hover\");\n    hs.properties.fill = am4core.color(\"#367B25\");\n    worldSeries.exclude = [\"AQ\"]; //worldSeries.exclude = [\"HK\"];\n\n    /**\r\n     * Series for the U.S. map\r\n     * It will use its own `geodata`\r\n     */\n\n    let usaSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    usaSeries.geodata = am4geodata_usaLow;\n    usaSeries.useGeodata = true;\n    polygonTemplate = usaSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0);\n    polygonTemplate.nonScalingStroke = true;\n    /**\r\n    * Series for the Australia Map\r\n    * It will use its own `geodata`\r\n    */\n\n    let australiaSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    australiaSeries.geodata = am4geodata_australiaLow;\n    australiaSeries.useGeodata = true;\n    polygonTemplate = australiaSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0);\n    polygonTemplate.nonScalingStroke = true;\n    /**\r\n     * Series for the China Map\r\n     * It will use its own `geodata`\r\n     */\n\n    let chinaSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    chinaSeries.geodata = am4geodata_chinaLow;\n    chinaSeries.useGeodata = true;\n    polygonTemplate = chinaSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0);\n    polygonTemplate.nonScalingStroke = true;\n    /**\r\n     * Series for the India Map\r\n     * It will use its own `geodata`\r\n     */\n\n    let indiaSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    indiaSeries.geodata = am4geodata_indiaLow;\n    indiaSeries.useGeodata = true;\n    polygonTemplate = indiaSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0);\n    polygonTemplate.nonScalingStroke = true;\n    /**\r\n     * Series for the Japan Map\r\n     * It will use its own `geodata`\r\n     */\n\n    let japanSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    japanSeries.geodata = am4geodata_japanLow;\n    japanSeries.useGeodata = true;\n    polygonTemplate = japanSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0);\n    polygonTemplate.nonScalingStroke = true;\n    /**\r\n     * Series for the Canada Map\r\n     * It will use its own `geodata`\r\n     */\n\n    let canadaSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    canadaSeries.geodata = am4geodata_canadaLow;\n    canadaSeries.useGeodata = true;\n    polygonTemplate = canadaSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0);\n    polygonTemplate.nonScalingStroke = true;\n    /**\r\n    * Series for the UK Map\r\n    * It will use its own `geodata`\r\n    */\n\n    let ukSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    ukSeries.geodata = am4geodata_ukLow;\n    ukSeries.useGeodata = true;\n    polygonTemplate = ukSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0);\n    polygonTemplate.nonScalingStroke = true;\n    this.setState({\n      chart: chart\n    });\n    this.getAllRegions();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.isLoaded) this.renderMap(this.state.chart);\n  }\n\n  componentWillUnmount() {}\n\n  renderMap(chart) {\n    this.renderGeoLocations(chart);\n    this.renderGeoPairLines(chart);\n    this.includeExcludeGeoLocations(chart);\n  }\n\n  renderGeoLocations(chart) {\n    /*\r\n      Adding markers\r\n    */\n    let imageSeries = chart.series.push(new am4maps.MapImageSeries());\n    let imageSeriesTemplate = imageSeries.mapImages.template;\n    let circle = imageSeriesTemplate.createChild(am4core.Circle);\n    circle.radius = 3;\n    circle.fill = am4core.color(\"#221177\");\n    circle.stroke = am4core.color(\"#FFFFFF\");\n    circle.strokeWidth = 1;\n    circle.nonScaling = true;\n    circle.tooltipText = \"{region} \\n {location}\";\n    imageSeriesTemplate.propertyFields.latitude = \"latitude\";\n    imageSeriesTemplate.propertyFields.longitude = \"longitude\";\n    let imageSeriesData = [];\n    console.log(this.state.liveRegions);\n\n    for (var liveRegion of this.state.liveRegions) {\n      imageSeriesData.push(this.azureLocations[liveRegion.GeoRegion]);\n    }\n\n    imageSeries.data = imageSeriesData;\n    this.renderGeoPairLines(chart);\n  }\n\n  renderGeoPairLines(chart) {\n    var lineSeries = chart.series.push(new am4maps.MapArcSeries());\n    let lineSeriesTemplate = lineSeries.mapLines.template;\n    lineSeriesTemplate.shortestDistance = true;\n    lineSeriesTemplate.line.stroke = am4core.color(\"#2277AA\");\n    lineSeriesTemplate.line.strokeOpacity = 0.8;\n    lineSeriesTemplate.line.strokeWidth = 1; //lineSeriesTemplate.line.strokeDasharray = \"3,3\";\n\n    let lineSeriesData = [];\n    let drawnLines = [];\n\n    for (var liveRegion of this.state.liveRegions) {\n      let drawnLine = false;\n\n      for (var temp of drawnLines) {\n        if (temp.toString() === [liveRegion.GeoPairRegion, liveRegion.GeoRegion].toString()) {\n          drawnLine = true;\n          break;\n        }\n      }\n\n      if (liveRegion.GeoRegion in this.azureLocations && !drawnLine) {\n        lineSeriesData.push([{\n          \"latitude\": this.azureLocations[liveRegion.GeoRegion].latitude,\n          \"longitude\": this.azureLocations[liveRegion.GeoRegion].longitude\n        }, {\n          \"latitude\": this.azureLocations[liveRegion.GeoPairRegion].latitude,\n          \"longitude\": this.azureLocations[liveRegion.GeoPairRegion].longitude\n        }]);\n        drawnLines.push([liveRegion.GeoRegion, liveRegion.GeoPairRegion]);\n      } else {\n        console.log(liveRegion.GeoRegion);\n      }\n    }\n\n    console.log(lineSeriesData);\n    lineSeries.data = [{\n      \"multiGeoLine\": lineSeriesData\n    }];\n  }\n\n  includeExcludeGeoLocations(chart) {\n    if (this.props.isGeographical) this.renderSelectedRegions(chart);\n  }\n\n  renderSelectedRegions(chart) {\n    let worldSeries = chart.series.getIndex(0);\n    var polygonTemplate = worldSeries.mapPolygons.template;\n    console.log(worldSeries);\n\n    if (this.props.geographyType == \"Americas\") {\n      worldSeries.exclude = [\"IN\"];\n      worldSeries.include = [\"PT\", \"ES\", \"FR\", \"DE\", \"BE\", \"NL\", \"IT\", \"AT\", \"GB\", \"IE\", \"CH\", \"LU\"];\n    }\n  }\n\n  getAllRegions() {\n    fetch(\"https://localhost:44303/api/region/all\").then(res => res.json()).then(result => {\n      this.setState({\n        isLoaded: true,\n        liveRegions: JSON.parse(result.content)\n      });\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"chartdiv\",\n      style: {\n        paddingLeft: 0,\n        paddingRight: 0,\n        height: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["C:\\Users\\tekommin.REDMOND\\source\\repos\\capacity-management-ui\\src\\Map.js"],"names":["React","am4core","am4themes_animated","am4maps","am4geodata_worldLow","am4geodata_usaLow","am4geodata_australiaLow","am4geodata_chinaLow","am4geodata_indiaLow","am4geodata_japanLow","am4geodata_canadaLow","am4geodata_ukLow","azureLocations","useTheme","Map","Component","constructor","props","state","error","isLoaded","liveRegions","chart","componentDidMount","create","MapChart","geodata","projection","projections","Miller","worldSeries","series","push","MapPolygonSeries","useGeodata","polygonTemplate","mapPolygons","template","tooltipText","fill","colors","getIndex","nonScalingStroke","hs","states","properties","color","exclude","usaSeries","australiaSeries","chinaSeries","indiaSeries","japanSeries","canadaSeries","ukSeries","setState","getAllRegions","componentDidUpdate","prevProps","prevState","renderMap","componentWillUnmount","renderGeoLocations","renderGeoPairLines","includeExcludeGeoLocations","imageSeries","MapImageSeries","imageSeriesTemplate","mapImages","circle","createChild","Circle","radius","stroke","strokeWidth","nonScaling","propertyFields","latitude","longitude","imageSeriesData","console","log","liveRegion","GeoRegion","data","lineSeries","MapArcSeries","lineSeriesTemplate","mapLines","shortestDistance","line","strokeOpacity","lineSeriesData","drawnLines","drawnLine","temp","toString","GeoPairRegion","isGeographical","renderSelectedRegions","geographyType","include","fetch","then","res","json","result","JSON","parse","content","render","paddingLeft","paddingRight","height"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\r\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\r\nimport am4geodata_usaLow from \"@amcharts/amcharts4-geodata/usaLow\";\r\nimport am4geodata_australiaLow from \"@amcharts/amcharts4-geodata/australiaLow\";\r\nimport am4geodata_chinaLow from \"@amcharts/amcharts4-geodata/chinaLow\";\r\nimport am4geodata_indiaLow from \"@amcharts/amcharts4-geodata/indiaLow\";\r\nimport am4geodata_japanLow from \"@amcharts/amcharts4-geodata/japanLow\";\r\nimport am4geodata_canadaLow from \"@amcharts/amcharts4-geodata/canadaLow\";\r\nimport am4geodata_ukLow from \"@amcharts/amcharts4-geodata/ukLow\";\r\nimport azureLocations from './AzureLocations.json';\r\nam4core.useTheme(am4themes_animated);\r\n\r\n\r\nclass Map extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      liveRegions: [],\r\n      chart: null\r\n    };    \r\n  }\r\n  \r\n  azureLocations = azureLocations;\r\n  \r\n  componentDidMount() {\r\n\r\n    let chart = am4core.create(\"chartdiv\", am4maps.MapChart);\r\n\r\n    // Set map definition\r\n    chart.geodata = am4geodata_worldLow;\r\n    \r\n    // Set projection\r\n    chart.projection = new am4maps.projections.Miller();\r\n    \r\n    // Series for World map\r\n    let worldSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    worldSeries.useGeodata = true;\r\n    \r\n    var polygonTemplate = worldSeries.mapPolygons.template;\r\n    polygonTemplate.tooltipText = \"{name}\";\r\n    polygonTemplate.fill = chart.colors.getIndex(0);\r\n    polygonTemplate.nonScalingStroke = true;\r\n    \r\n    // Hover state\r\n    let hs = polygonTemplate.states.create(\"hover\");\r\n    hs.properties.fill = am4core.color(\"#367B25\");\r\n    worldSeries.exclude = [\"AQ\"];\r\n    //worldSeries.exclude = [\"HK\"];\r\n\r\n    /**\r\n     * Series for the U.S. map\r\n     * It will use its own `geodata`\r\n     */\r\n    let usaSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    usaSeries.geodata = am4geodata_usaLow;\r\n    usaSeries.useGeodata = true;\r\n    polygonTemplate = usaSeries.mapPolygons.template;\r\n    polygonTemplate.tooltipText = \"{name}\";\r\n    polygonTemplate.fill = chart.colors.getIndex(0);\r\n    polygonTemplate.nonScalingStroke = true;\r\n\r\n\r\n     /**\r\n     * Series for the Australia Map\r\n     * It will use its own `geodata`\r\n     */\r\n    let australiaSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    australiaSeries.geodata = am4geodata_australiaLow;\r\n    australiaSeries.useGeodata = true;\r\n    polygonTemplate = australiaSeries.mapPolygons.template;\r\n    polygonTemplate.tooltipText = \"{name}\";\r\n    polygonTemplate.fill = chart.colors.getIndex(0);\r\n    polygonTemplate.nonScalingStroke = true;\r\n\r\n    /**\r\n     * Series for the China Map\r\n     * It will use its own `geodata`\r\n     */\r\n    let chinaSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    chinaSeries.geodata = am4geodata_chinaLow;\r\n    chinaSeries.useGeodata = true;\r\n    polygonTemplate = chinaSeries.mapPolygons.template;\r\n    polygonTemplate.tooltipText = \"{name}\";\r\n    polygonTemplate.fill = chart.colors.getIndex(0);\r\n    polygonTemplate.nonScalingStroke = true;\r\n\r\n    /**\r\n     * Series for the India Map\r\n     * It will use its own `geodata`\r\n     */\r\n    let indiaSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    indiaSeries.geodata = am4geodata_indiaLow;\r\n    indiaSeries.useGeodata = true;\r\n    polygonTemplate = indiaSeries.mapPolygons.template;\r\n    polygonTemplate.tooltipText = \"{name}\";\r\n    polygonTemplate.fill = chart.colors.getIndex(0);\r\n    polygonTemplate.nonScalingStroke = true;\r\n\r\n    /**\r\n     * Series for the Japan Map\r\n     * It will use its own `geodata`\r\n     */\r\n    let japanSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    japanSeries.geodata = am4geodata_japanLow;\r\n    japanSeries.useGeodata = true;\r\n    polygonTemplate = japanSeries.mapPolygons.template;\r\n    polygonTemplate.tooltipText = \"{name}\";\r\n    polygonTemplate.fill = chart.colors.getIndex(0);\r\n    polygonTemplate.nonScalingStroke = true;\r\n\r\n    /**\r\n     * Series for the Canada Map\r\n     * It will use its own `geodata`\r\n     */\r\n    let canadaSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    canadaSeries.geodata = am4geodata_canadaLow;\r\n    canadaSeries.useGeodata = true;\r\n    polygonTemplate = canadaSeries.mapPolygons.template;\r\n    polygonTemplate.tooltipText = \"{name}\";\r\n    polygonTemplate.fill = chart.colors.getIndex(0);\r\n    polygonTemplate.nonScalingStroke = true;\r\n\r\n        /**\r\n     * Series for the UK Map\r\n     * It will use its own `geodata`\r\n     */\r\n    let ukSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    ukSeries.geodata = am4geodata_ukLow;\r\n    ukSeries.useGeodata = true;\r\n    polygonTemplate = ukSeries.mapPolygons.template;\r\n    polygonTemplate.tooltipText = \"{name}\";\r\n    polygonTemplate.fill = chart.colors.getIndex(0);\r\n    polygonTemplate.nonScalingStroke = true;\r\n\r\n    this.setState({\r\n        chart: chart\r\n    });\r\n\r\n    this.getAllRegions();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState)\r\n  {\r\n    if(this.state.isLoaded)\r\n      this.renderMap(this.state.chart);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n  \r\n  }\r\n  \r\n  renderMap(chart)\r\n  {\r\n    this.renderGeoLocations(chart);\r\n    this.renderGeoPairLines(chart);\r\n    this.includeExcludeGeoLocations(chart);\r\n  }\r\n\r\n  renderGeoLocations(chart)\r\n  {\r\n    /*\r\n      Adding markers\r\n    */\r\n    let imageSeries = chart.series.push(new am4maps.MapImageSeries());\r\n    let imageSeriesTemplate = imageSeries.mapImages.template;\r\n    let circle = imageSeriesTemplate.createChild(am4core.Circle);\r\n    circle.radius = 3;\r\n    circle.fill = am4core.color(\"#221177\");\r\n    circle.stroke = am4core.color(\"#FFFFFF\");\r\n    circle.strokeWidth = 1;\r\n    circle.nonScaling = true;\r\n    circle.tooltipText = \"{region} \\n {location}\";\r\n\r\n    imageSeriesTemplate.propertyFields.latitude = \"latitude\";\r\n    imageSeriesTemplate.propertyFields.longitude = \"longitude\";\r\n\r\n    let imageSeriesData = [];\r\n    console.log(this.state.liveRegions);\r\n    for (var liveRegion of this.state.liveRegions)\r\n    {\r\n        imageSeriesData.push(this.azureLocations[liveRegion.GeoRegion]);\r\n    }\r\n\r\n    imageSeries.data = imageSeriesData;\r\n\r\n    this.renderGeoPairLines(chart);\r\n    \r\n  }\r\n\r\n  renderGeoPairLines(chart)\r\n  {\r\n    var lineSeries = chart.series.push(new am4maps.MapArcSeries());\r\n    let lineSeriesTemplate = lineSeries.mapLines.template;\r\n    lineSeriesTemplate.shortestDistance = true;\r\n    lineSeriesTemplate.line.stroke = am4core.color(\"#2277AA\");\r\n    lineSeriesTemplate.line.strokeOpacity = 0.8;\r\n    lineSeriesTemplate.line.strokeWidth = 1;\r\n    //lineSeriesTemplate.line.strokeDasharray = \"3,3\";\r\n    let lineSeriesData = [];\r\n    let drawnLines = [];\r\n    for (var liveRegion of this.state.liveRegions)\r\n    { \r\n      let drawnLine = false;\r\n      for(var temp of drawnLines)\r\n      { \r\n        if(temp.toString() === [liveRegion.GeoPairRegion, liveRegion.GeoRegion].toString())\r\n        {\r\n          drawnLine = true;\r\n          break;\r\n        }\r\n      }\r\n      if(liveRegion.GeoRegion in this.azureLocations &&  !drawnLine)\r\n      {\r\n        lineSeriesData.push(\r\n          [            \r\n            {\"latitude\" : this.azureLocations[liveRegion.GeoRegion].latitude,\r\n            \"longitude\" : this.azureLocations[liveRegion.GeoRegion].longitude},\r\n            {\"latitude\" : this.azureLocations[liveRegion.GeoPairRegion].latitude,\r\n            \"longitude\" : this.azureLocations[liveRegion.GeoPairRegion].longitude}\r\n          ]          \r\n        );\r\n        drawnLines.push([liveRegion.GeoRegion, liveRegion.GeoPairRegion]);          \r\n      }\r\n      else{console.log(liveRegion.GeoRegion);}\r\n    }\r\n    console.log(lineSeriesData);\r\n    lineSeries.data = [{\r\n      \"multiGeoLine\": lineSeriesData\r\n    }];\r\n  }\r\n\r\n  includeExcludeGeoLocations(chart)\r\n  {\r\n      if(this.props.isGeographical)\r\n          this.renderSelectedRegions(chart);\r\n  }\r\n\r\n  renderSelectedRegions(chart)\r\n  {\r\n      let worldSeries = chart.series.getIndex(0);\r\n      var polygonTemplate = worldSeries.mapPolygons.template;\r\n      console.log(worldSeries);\r\n      if(this.props.geographyType == \"Americas\")\r\n      {\r\n        worldSeries.exclude = [\"IN\"];\r\n        worldSeries.include = [\"PT\", \"ES\", \"FR\", \"DE\", \"BE\", \"NL\", \"IT\", \"AT\", \"GB\", \"IE\", \"CH\", \"LU\"];\r\n      }\r\n  }\r\n\r\n  getAllRegions()\r\n  {\r\n    fetch(\"https://localhost:44303/api/region/all\")\r\n    .then(res => res.json())\r\n    .then(\r\n      (result) => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          liveRegions: JSON.parse(result.content)\r\n        });\r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          error\r\n        });\r\n      }\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"chartdiv\" style={{ paddingLeft: 0, paddingRight: 0, height: \"100%\" }}></div>\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nexport default Map;"]},"metadata":{},"sourceType":"module"}
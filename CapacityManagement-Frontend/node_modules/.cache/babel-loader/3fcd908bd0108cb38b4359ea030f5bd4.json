{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hakumbu\\\\Desktop\\\\Hackathon2019\\\\CapacityManagement-Frontend\\\\src\\\\RegionalMap.js\";\nimport React from \"react\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\nimport am4geodata_usaLow from \"@amcharts/amcharts4-geodata/usaLow\";\nimport am4geodata_australiaLow from \"@amcharts/amcharts4-geodata/australiaLow\";\nimport am4geodata_indiaLow from \"@amcharts/amcharts4-geodata/indiaLow\";\nimport am4geodata_canadaLow from \"@amcharts/amcharts4-geodata/canadaLow\";\nimport azureLocations from './AzureLocations.json';\nimport PropTypes from 'prop-types';\nam4core.useTheme(am4themes_animated);\n\nclass RegionalMap extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    let chart = am4core.create(\"chartdiv\", am4maps.MapChart);\n    this.initialize(chart);\n    this.setState({\n      chart: chart\n    });\n  }\n\n  initialize(chart) {//this.renderWorldMap(chart)\n    //this.overlayMap(chart, am4geodata_usaLow);\n    //this.overlayMap(chart, am4geodata_australiaLow);\n    //this.overlayMap(chart, am4geodata_indiaLow);\n    //this.overlayMap(chart, am4geodata_canadaLow);\n    //this.getAllRegions();\n  }\n\n  renderWorldMap(chart) {\n    // Set map definition\n    chart.geodata = am4geodata_worldLow; // Set projection\n\n    chart.projection = new am4maps.projections.Miller(); // Series for World map\n\n    let worldSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    worldSeries.useGeodata = true;\n    var polygonTemplate = worldSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0);\n    polygonTemplate.nonScalingStroke = true; // Hover state\n\n    let hs = polygonTemplate.states.create(\"hover\");\n    hs.properties.fill = am4core.color(\"#367B25\");\n    worldSeries.exclude = [\"AQ\"];\n    polygonTemplate.events.on(\"hit\", function (event) {\n      console.log(chart.zoomLevel);\n      console.log(chart.zoomGeoPoint);\n    }); // Set Zoom Control\n\n    chart.zoomControl = new am4maps.ZoomControl();\n    var homeButton = new am4core.Button();\n    homeButton.events.on(\"hit\", function () {\n      chart.goHome();\n    });\n    homeButton.icon = new am4core.Sprite();\n    homeButton.padding(7, 5, 7, 5);\n    homeButton.width = 30;\n    homeButton.icon.path = \"M16,8 L14,8 L14,16 L10,16 L10,10 L6,10 L6,16 L2,16 L2,8 L0,8 L8,0 L16,8 Z M16,8\";\n    homeButton.marginBottom = 10;\n    homeButton.parent = chart.zoomControl;\n    homeButton.insertBefore(chart.zoomControl.plusButton);\n  }\n\n  overlayMap(chart, geodata) {\n    /**\r\n     * We overlay the world map with regional/state/county maps.\r\n     * It will use its own `geodata`\r\n     */\n    let overlaySeries = chart.series.push(new am4maps.MapPolygonSeries());\n    overlaySeries.geodata = geodata;\n    overlaySeries.useGeodata = true;\n    var polygonTemplate = overlaySeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = chart.colors.getIndex(0);\n    polygonTemplate.nonScalingStroke = true;\n  }\n\n  updateRenderedMap(chart) {\n    this.updateAzureLocations();\n    this.renderGeoLocations(chart);\n    this.renderGeoPairLines(chart);\n    this.zoomToSelectedRegions(chart);\n    this.applyHeatLegend(chart);\n  }\n\n  updateAzureLocations() {\n    for (var liveRegion of this.state.liveRegions) {\n      let temp = this.azureLocations[liveRegion.GeoRegion];\n\n      if (temp != undefined) {\n        temp['ENUtilization'] = \"ENUtilization : \" + liveRegion.ENUtilization;\n        temp['SellableCapacity'] = \"SellableCapacity : \" + liveRegion.SellableCapacity;\n        this.azureLocations[liveRegion.GeoRegion] = temp;\n      }\n    }\n  }\n\n  renderGeoLocations(chart) {\n    /*\r\n      Adding markers\r\n    */\n    let imageSeries = chart.series.push(new am4maps.MapImageSeries());\n    let imageSeriesTemplate = imageSeries.mapImages.template;\n    let circle = imageSeriesTemplate.createChild(am4core.Circle);\n    circle.radius = 5;\n    circle.fill = am4core.color(\"#221177\");\n    circle.stroke = am4core.color(\"#FFFFFF\");\n    circle.strokeWidth = 1;\n    circle.nonScaling = true;\n    circle.tooltipText = \"{region} \\n {location} \\n {ENUtilization} \\n {SellableCapacity}\";\n    imageSeriesTemplate.propertyFields.latitude = \"latitude\";\n    imageSeriesTemplate.propertyFields.longitude = \"longitude\";\n    let imageSeriesData = [];\n    console.log(this.state.liveRegions);\n\n    for (var liveRegion of this.state.liveRegions) {\n      imageSeriesData.push(this.azureLocations[liveRegion.GeoRegion]);\n    }\n\n    imageSeries.data = imageSeriesData;\n  }\n\n  renderGeoPairLines(chart) {\n    var lineSeries = chart.series.push(new am4maps.MapArcSeries());\n    let lineSeriesTemplate = lineSeries.mapLines.template;\n    lineSeriesTemplate.shortestDistance = true;\n    lineSeriesTemplate.line.strokeWidth = 1;\n    lineSeriesTemplate.line.stroke = am4core.color(\"#2277AA\");\n    lineSeriesTemplate.line.strokeOpacity = 0.8;\n    lineSeriesTemplate.line.controlPointDistance = 0.5;\n    let drawnRegions = [];\n    let drawnLines = [];\n\n    for (var liveRegion of this.state.liveRegions) {\n      let drawnLine = false;\n      var i = 0;\n\n      for (; i < drawnRegions.length; i++) {\n        var temp = drawnRegions[i];\n\n        if (temp.toString() === [liveRegion.GeoPairRegion, liveRegion.GeoRegion].toString()) {\n          drawnLine = true;\n          break;\n        }\n      }\n\n      if (liveRegion.GeoRegion in this.azureLocations && !drawnLine) {\n        var line = lineSeries.mapLines.create();\n        line.multiGeoLine = [[{\n          \"latitude\": this.azureLocations[liveRegion.GeoRegion].latitude,\n          \"longitude\": this.azureLocations[liveRegion.GeoRegion].longitude\n        }, {\n          \"latitude\": this.azureLocations[liveRegion.GeoPairRegion].latitude,\n          \"longitude\": this.azureLocations[liveRegion.GeoPairRegion].longitude\n        }]];\n        this.drawArrow(line, \"right\");\n        drawnRegions.push([liveRegion.GeoRegion, liveRegion.GeoPairRegion]);\n        drawnLines.push(line);\n      }\n\n      if (drawnLine) {\n        var line = lineSeries.mapLines.create();\n        line.multiGeoLine = [[{\n          \"latitude\": this.azureLocations[liveRegion.GeoPairRegion].latitude,\n          \"longitude\": this.azureLocations[liveRegion.GeoPairRegion].longitude\n        }, {\n          \"latitude\": this.azureLocations[liveRegion.GeoRegion].latitude,\n          \"longitude\": this.azureLocations[liveRegion.GeoRegion].longitude\n        }]];\n        this.drawArrow(line, \"left\");\n      }\n    }\n  }\n\n  drawArrow(line, direction) {\n    var bullet = line.lineObjects.create();\n    var arrow = bullet.createChild(am4core.Triangle);\n    arrow.horizontalCenter = \"middle\";\n    arrow.verticalCenter = \"middle\";\n    arrow.stroke = am4core.color(\"#fff\");\n    arrow.opacity = 0.5;\n    arrow.direction = direction;\n    arrow.width = 8;\n    arrow.height = 8;\n    if (direction == \"right\") bullet.position = 0.2;else bullet.position = 0.8;\n  }\n\n  render() {\n    const region = this.props.region;\n\n    if (region === \"\") {\n      return React.createElement(\"div\", {\n        id: \"chartdiv\",\n        style: {\n          paddingLeft: 0,\n          paddingRight: 0,\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      });\n    } else {\n      return React.createElement(\"div\", {\n        id: \"chartdiv\",\n        style: {\n          paddingLeft: 0,\n          paddingRight: 0,\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, \"region is \", region);\n    }\n  }\n\n}\n\nRegionalMap.propTypes = {\n  region: PropTypes.string.isRequired\n};\nexport default RegionalMap;","map":{"version":3,"sources":["C:\\Users\\hakumbu\\Desktop\\Hackathon2019\\CapacityManagement-Frontend\\src\\RegionalMap.js"],"names":["React","am4core","am4themes_animated","am4maps","am4charts","am4geodata_worldLow","am4geodata_usaLow","am4geodata_australiaLow","am4geodata_indiaLow","am4geodata_canadaLow","azureLocations","PropTypes","useTheme","RegionalMap","Component","constructor","props","componentDidMount","chart","create","MapChart","initialize","setState","renderWorldMap","geodata","projection","projections","Miller","worldSeries","series","push","MapPolygonSeries","useGeodata","polygonTemplate","mapPolygons","template","tooltipText","fill","colors","getIndex","nonScalingStroke","hs","states","properties","color","exclude","events","on","event","console","log","zoomLevel","zoomGeoPoint","zoomControl","ZoomControl","homeButton","Button","goHome","icon","Sprite","padding","width","path","marginBottom","parent","insertBefore","plusButton","overlayMap","overlaySeries","updateRenderedMap","updateAzureLocations","renderGeoLocations","renderGeoPairLines","zoomToSelectedRegions","applyHeatLegend","liveRegion","state","liveRegions","temp","GeoRegion","undefined","ENUtilization","SellableCapacity","imageSeries","MapImageSeries","imageSeriesTemplate","mapImages","circle","createChild","Circle","radius","stroke","strokeWidth","nonScaling","propertyFields","latitude","longitude","imageSeriesData","data","lineSeries","MapArcSeries","lineSeriesTemplate","mapLines","shortestDistance","line","strokeOpacity","controlPointDistance","drawnRegions","drawnLines","drawnLine","i","length","toString","GeoPairRegion","multiGeoLine","drawArrow","direction","bullet","lineObjects","arrow","Triangle","horizontalCenter","verticalCenter","opacity","height","position","render","region","paddingLeft","paddingRight","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\r\nimport am4geodata_usaLow from \"@amcharts/amcharts4-geodata/usaLow\";\r\nimport am4geodata_australiaLow from \"@amcharts/amcharts4-geodata/australiaLow\";\r\nimport am4geodata_indiaLow from \"@amcharts/amcharts4-geodata/indiaLow\";\r\nimport am4geodata_canadaLow from \"@amcharts/amcharts4-geodata/canadaLow\";\r\nimport azureLocations from './AzureLocations.json';\r\nimport PropTypes from 'prop-types';\r\nam4core.useTheme(am4themes_animated);\r\n\r\n\r\nclass RegionalMap extends React.Component {\r\n\r\n static propTypes = {\r\n        region: PropTypes.string.isRequired\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  \r\n  componentDidMount() {\r\n\r\n    let chart = am4core.create(\"chartdiv\", am4maps.MapChart);\r\n\r\n    this.initialize(chart);\r\n\r\n    this.setState({\r\n        chart: chart\r\n    }); \r\n  }\r\n\r\n  initialize(chart)\r\n  {\r\n    //this.renderWorldMap(chart)\r\n    //this.overlayMap(chart, am4geodata_usaLow);\r\n    //this.overlayMap(chart, am4geodata_australiaLow);\r\n    //this.overlayMap(chart, am4geodata_indiaLow);\r\n    //this.overlayMap(chart, am4geodata_canadaLow);\r\n    //this.getAllRegions();\r\n  }\r\n\r\n  renderWorldMap(chart)\r\n  {\r\n        // Set map definition\r\n        chart.geodata = am4geodata_worldLow;\r\n    \r\n        // Set projection\r\n        chart.projection = new am4maps.projections.Miller();\r\n        \r\n        // Series for World map\r\n        let worldSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n        worldSeries.useGeodata = true;\r\n        \r\n        var polygonTemplate = worldSeries.mapPolygons.template;\r\n        polygonTemplate.tooltipText = \"{name}\";\r\n        polygonTemplate.fill = chart.colors.getIndex(0);\r\n        polygonTemplate.nonScalingStroke = true;\r\n        \r\n        // Hover state\r\n        let hs = polygonTemplate.states.create(\"hover\");\r\n        hs.properties.fill = am4core.color(\"#367B25\");\r\n        worldSeries.exclude = [\"AQ\"];\r\n    \r\n        polygonTemplate.events.on(\"hit\", function (event) {\r\n          console.log(chart.zoomLevel);\r\n          console.log(chart.zoomGeoPoint);\r\n        })\r\n\r\n        // Set Zoom Control\r\n        chart.zoomControl = new am4maps.ZoomControl();\r\n        var homeButton = new am4core.Button();\r\n        homeButton.events.on(\"hit\", function(){\r\n          chart.goHome();\r\n        });\r\n\r\n        homeButton.icon = new am4core.Sprite();\r\n        homeButton.padding(7, 5, 7, 5);\r\n        homeButton.width = 30;\r\n        homeButton.icon.path = \"M16,8 L14,8 L14,16 L10,16 L10,10 L6,10 L6,16 L2,16 L2,8 L0,8 L8,0 L16,8 Z M16,8\";\r\n        homeButton.marginBottom = 10;\r\n        homeButton.parent = chart.zoomControl;\r\n        homeButton.insertBefore(chart.zoomControl.plusButton);\r\n  }\r\n\r\n  overlayMap(chart, geodata)\r\n  {\r\n    /**\r\n     * We overlay the world map with regional/state/county maps.\r\n     * It will use its own `geodata`\r\n     */\r\n\r\n    let overlaySeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    overlaySeries.geodata = geodata;\r\n    overlaySeries.useGeodata = true;\r\n    var polygonTemplate = overlaySeries.mapPolygons.template;\r\n    polygonTemplate.tooltipText = \"{name}\";\r\n    polygonTemplate.fill = chart.colors.getIndex(0);\r\n    polygonTemplate.nonScalingStroke = true;\r\n  }\r\n\r\n  updateRenderedMap(chart)\r\n  {\r\n    this.updateAzureLocations();\r\n    this.renderGeoLocations(chart);\r\n    this.renderGeoPairLines(chart);\r\n    this.zoomToSelectedRegions(chart);\r\n    this.applyHeatLegend(chart);\r\n  }\r\n\r\n  updateAzureLocations()\r\n  {\r\n    for (var liveRegion of this.state.liveRegions)\r\n    {\r\n        let temp = this.azureLocations[liveRegion.GeoRegion];\r\n        if(temp != undefined)\r\n        {\r\n          temp['ENUtilization'] = \"ENUtilization : \" + liveRegion.ENUtilization;\r\n          temp['SellableCapacity'] = \"SellableCapacity : \" + liveRegion.SellableCapacity;\r\n          this.azureLocations[liveRegion.GeoRegion] = temp;\r\n        }\r\n    }\r\n  }\r\n\r\n  renderGeoLocations(chart)\r\n  {\r\n    /*\r\n      Adding markers\r\n    */\r\n    let imageSeries = chart.series.push(new am4maps.MapImageSeries());\r\n    let imageSeriesTemplate = imageSeries.mapImages.template;\r\n    let circle = imageSeriesTemplate.createChild(am4core.Circle);\r\n    circle.radius = 5;\r\n    circle.fill = am4core.color(\"#221177\");\r\n    circle.stroke = am4core.color(\"#FFFFFF\");\r\n    circle.strokeWidth = 1;\r\n    circle.nonScaling = true;\r\n    circle.tooltipText = \"{region} \\n {location} \\n {ENUtilization} \\n {SellableCapacity}\";\r\n\r\n    imageSeriesTemplate.propertyFields.latitude = \"latitude\";\r\n    imageSeriesTemplate.propertyFields.longitude = \"longitude\";\r\n\r\n    let imageSeriesData = [];\r\n    console.log(this.state.liveRegions);\r\n    for (var liveRegion of this.state.liveRegions)\r\n    {\r\n        imageSeriesData.push(this.azureLocations[liveRegion.GeoRegion]);\r\n    }\r\n    imageSeries.data = imageSeriesData;\r\n    \r\n  }\r\n\r\n  renderGeoPairLines(chart)\r\n  {\r\n    var lineSeries = chart.series.push(new am4maps.MapArcSeries());\r\n    let lineSeriesTemplate = lineSeries.mapLines.template;\r\n    lineSeriesTemplate.shortestDistance = true;\r\n    lineSeriesTemplate.line.strokeWidth = 1;\r\n    lineSeriesTemplate.line.stroke = am4core.color(\"#2277AA\");\r\n    lineSeriesTemplate.line.strokeOpacity = 0.8;    \r\n    lineSeriesTemplate.line.controlPointDistance = 0.5;\r\n\r\n    let drawnRegions = [];\r\n    let drawnLines = [];\r\n    for (var liveRegion of this.state.liveRegions)\r\n    { \r\n      let drawnLine = false;\r\n      var i=0;\r\n      for(; i<drawnRegions.length; i++)\r\n      { \r\n        var temp = drawnRegions[i];\r\n        if(temp.toString() === [liveRegion.GeoPairRegion, liveRegion.GeoRegion].toString())\r\n        {\r\n          drawnLine = true;\r\n          break;\r\n        }\r\n      }\r\n      if(liveRegion.GeoRegion in this.azureLocations &&  !drawnLine)\r\n      {\r\n        var line = lineSeries.mapLines.create();\r\n        line.multiGeoLine = [[\r\n          {\"latitude\" : this.azureLocations[liveRegion.GeoRegion].latitude,\r\n          \"longitude\" : this.azureLocations[liveRegion.GeoRegion].longitude},\r\n          {\"latitude\" : this.azureLocations[liveRegion.GeoPairRegion].latitude,\r\n          \"longitude\" : this.azureLocations[liveRegion.GeoPairRegion].longitude}\r\n        ]];\r\n        this.drawArrow(line, \"right\");\r\n        drawnRegions.push([liveRegion.GeoRegion, liveRegion.GeoPairRegion]); \r\n        drawnLines.push(line);\r\n      }\r\n      if(drawnLine)\r\n      {\r\n        var line = lineSeries.mapLines.create();\r\n        line.multiGeoLine = [[\r\n          {\"latitude\" : this.azureLocations[liveRegion.GeoPairRegion].latitude,\r\n          \"longitude\" : this.azureLocations[liveRegion.GeoPairRegion].longitude},\r\n          {\"latitude\" : this.azureLocations[liveRegion.GeoRegion].latitude,\r\n          \"longitude\" : this.azureLocations[liveRegion.GeoRegion].longitude}\r\n        ]];\r\n        this.drawArrow(line, \"left\");\r\n      }\r\n    }\r\n  }\r\n\r\n  drawArrow(line, direction)\r\n  {\r\n    var bullet = line.lineObjects.create();    \r\n    var arrow = bullet.createChild(am4core.Triangle);\r\n    arrow.horizontalCenter = \"middle\";\r\n    arrow.verticalCenter = \"middle\";\r\n    arrow.stroke = am4core.color(\"#fff\");\r\n    arrow.opacity = 0.5;\r\n    arrow.direction = direction;\r\n    arrow.width = 8;\r\n    arrow.height = 8;  \r\n    if(direction == \"right\")       \r\n        bullet.position = 0.2;\r\n    else\r\n        bullet.position = 0.8;\r\n  }\r\n\r\n  render() {\r\n    const {region} = this.props;\r\n    if(region === \"\"){\r\n        return (\r\n        <div id=\"chartdiv\" style={{ paddingLeft: 0, paddingRight: 0, height: \"100%\" }}></div>\r\n\r\n        );\r\n    }\r\n    else{\r\n\r\n        return (\r\n            <div id=\"chartdiv\" style={{ paddingLeft: 0, paddingRight: 0, height: \"100%\" }}>region is {region}</div>\r\n    \r\n            );\r\n    }\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nexport default RegionalMap;"]},"metadata":{},"sourceType":"module"}
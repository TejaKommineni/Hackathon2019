{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tekommin.REDMOND\\\\source\\\\repos\\\\capacity-management-ui\\\\src\\\\Geographical.js\";\nimport React, { Component } from 'react';\nimport Map from \"./Map\";\nimport TopNavbar from \"./TopNavbar\";\nimport { Container, Row, Col } from 'react-bootstrap';\n\nclass Geographical extends Component {\n  render() {\n    const geographyType = this.props.match.params.id.geographyType;\n    console.log(geographyType);\n\n    if (geographyType == 1) {\n      return React.createElement(Map, {\n        isGeographical: true,\n        geographyType: \"Americas\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      });\n    }\n\n    if (geographyType == 2) {\n      return React.createElement(Map, {\n        isGeographical: true,\n        geographyType: \"Asia Pacific\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      });\n    }\n\n    if (geographyType == 3) {\n      return React.createElement(Map, {\n        isGeographical: true,\n        geographyType: \"Europe\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      });\n    }\n\n    if (geographyType == 4) {\n      return React.createElement(Map, {\n        isGeographical: true,\n        geographyType: \"Middle East And Africa\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      });\n    }\n\n    if (geographyType == 5) {\n      return React.createElement(Map, {\n        isGeographical: true,\n        geographyType: \"Azure Government\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nexport default Geographical;","map":{"version":3,"sources":["C:\\Users\\tekommin.REDMOND\\source\\repos\\capacity-management-ui\\src\\Geographical.js"],"names":["React","Component","Map","TopNavbar","Container","Row","Col","Geographical","render","geographyType","props","match","params","id","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAAQC,SAAR,EAAoBC,GAApB,EAAyBC,GAAzB,QAAoC,iBAApC;;AAEA,MAAMC,YAAN,SAA2BN,SAA3B,CAAqC;AAEnCO,EAAAA,MAAM,GAAG;AAAA,UACCC,aADD,GACmB,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAD3C,CACCJ,aADD;AAEPK,IAAAA,OAAO,CAACC,GAAR,CAAYN,aAAZ;;AACA,QAAGA,aAAa,IAAI,CAApB,EACA;AACE,aACE,oBAAC,GAAD;AAAK,QAAA,cAAc,EAAI,IAAvB;AAA6B,QAAA,aAAa,EAAI,UAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD;;AACD,QAAGA,aAAa,IAAI,CAApB,EACA;AACE,aACE,oBAAC,GAAD;AAAK,QAAA,cAAc,EAAI,IAAvB;AAA6B,QAAA,aAAa,EAAI,cAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD;;AACD,QAAGA,aAAa,IAAI,CAApB,EACA;AACE,aACE,oBAAC,GAAD;AAAK,QAAA,cAAc,EAAI,IAAvB;AAA6B,QAAA,aAAa,EAAI,QAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD;;AACD,QAAGA,aAAa,IAAI,CAApB,EACA;AACE,aACE,oBAAC,GAAD;AAAK,QAAA,cAAc,EAAI,IAAvB;AAA6B,QAAA,aAAa,EAAI,wBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD;;AACD,QAAGA,aAAa,IAAI,CAApB,EACA;AACE,aACE,oBAAC,GAAD;AAAK,QAAA,cAAc,EAAI,IAAvB;AAA6B,QAAA,aAAa,EAAI,kBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD;AACF;;AAnCkC;;AAuCrC,eAAeF,YAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport Map from \"./Map\";\r\nimport TopNavbar from \"./TopNavbar\";\r\nimport {Container , Row, Col } from 'react-bootstrap';\r\n\r\nclass Geographical extends Component {\r\n  \r\n  render() {    \r\n    const { geographyType } = this.props.match.params.id;\r\n    console.log(geographyType);\r\n    if(geographyType == 1)\r\n    {\r\n      return (      \r\n        <Map isGeographical = {true} geographyType = {\"Americas\"}/>\r\n      );   \r\n    } \r\n    if(geographyType == 2)\r\n    {\r\n      return (      \r\n        <Map isGeographical = {true} geographyType = {\"Asia Pacific\"}/>\r\n      );   \r\n    } \r\n    if(geographyType == 3)\r\n    {\r\n      return (      \r\n        <Map isGeographical = {true} geographyType = {\"Europe\"}/>\r\n      );   \r\n    } \r\n    if(geographyType == 4)\r\n    {\r\n      return (      \r\n        <Map isGeographical = {true} geographyType = {\"Middle East And Africa\"}/>\r\n      );   \r\n    } \r\n    if(geographyType == 5)\r\n    {\r\n      return (      \r\n        <Map isGeographical = {true} geographyType = {\"Azure Government\"}/>\r\n      );   \r\n    } \r\n  }\r\n  \r\n}\r\n\r\nexport default Geographical;"]},"metadata":{},"sourceType":"module"}
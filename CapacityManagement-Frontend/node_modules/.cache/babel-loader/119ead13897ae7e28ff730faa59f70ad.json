{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hakumbu\\\\Desktop\\\\Hackathon2019\\\\CapacityManagement-Frontend\\\\src\\\\SideNavbar.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Collapse, Accordion, Card, Form, Col } from 'react-bootstrap';\nimport AzureLocations from './AzureLocations';\nexport default class SideNavbar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.selectGeography = selectedGeography => {\n      console.log(selectedGeography);\n      console.log(selectedGeography.target.value);\n      console.log(this.props.selectGeography);\n      this.props.selectGeography(selectedGeography.target.value);\n    };\n\n    this.selectRegion = selectedRegion => {\n      this.props.selectRegion(selectedRegion.target.value);\n    };\n  }\n\n  componentDidMount() {}\n\n  getRegionsForGeography() {\n    const selectedGeography = this.props.selectedGeography;\n\n    if (selectedGeography != \"\") {\n      var listRegions = [];\n      Object.keys(AzureLocations).forEach(function (key) {\n        if (AzureLocations[key].geography == selectedGeography) {\n          listRegions.push(key);\n        }\n      });\n      this.listRegions = listRegions;\n    }\n  }\n\n  render() {\n    this.getRegionsForGeography();\n    return React.createElement(React.Fragment, null, React.createElement(Accordion, {\n      defaultActiveKey: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Select Regions \", this.props.accordionOpen)), React.createElement(Accordion.Collapse, {\n      eventKey: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(Form.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridGeography\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"Geography\"), React.createElement(Form.Control, {\n      as: \"select\",\n      onChange: this.selectGeography,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Choose...\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Americas\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Asia Pacific\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Europe\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Middle East and Africa\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Azure Government\")))), React.createElement(Form.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridRegions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Regions\"), React.createElement(Form.Control, {\n      as: \"select\",\n      onChange: this.selectRegion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Choose...\"), this.listRegions != null && this.listRegions.map(e => {\n      return React.createElement(\"option\", {\n        key: e,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, e);\n    })))))))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    })));\n  }\n\n}\nSideNavbar.propTypes = {\n  selectedGeography: PropTypes.string.isRequired,\n  listRegions: PropTypes.arrayOf(PropTypes.string)\n};","map":{"version":3,"sources":["C:\\Users\\hakumbu\\Desktop\\Hackathon2019\\CapacityManagement-Frontend\\src\\SideNavbar.js"],"names":["React","Component","PropTypes","Button","Collapse","Accordion","Card","Form","Col","AzureLocations","SideNavbar","constructor","props","selectGeography","selectedGeography","console","log","target","value","selectRegion","selectedRegion","componentDidMount","getRegionsForGeography","listRegions","Object","keys","forEach","key","geography","push","render","accordionOpen","map","e","propTypes","string","isRequired","arrayOf"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, Collapse, Accordion, Card, Form, Col  } from 'react-bootstrap';\r\nimport  AzureLocations from './AzureLocations';\r\n\r\n\r\nexport default class SideNavbar extends Component {\r\n\r\nstatic propTypes = {\r\n    selectedGeography: PropTypes.string.isRequired,\r\n    listRegions: PropTypes.arrayOf(PropTypes.string)\r\n}\r\n\r\nconstructor(props) {\r\n    super(props);\r\n}\r\n\r\ncomponentDidMount()\r\n{\r\n\r\n}\r\n\r\ngetRegionsForGeography() \r\n{\r\n    const {selectedGeography} = this.props;\r\n    if(selectedGeography != \"\")\r\n    {\r\n        var listRegions = [];\r\n        Object.keys(AzureLocations).forEach(function(key) {\r\n            if(AzureLocations[key].geography == selectedGeography)\r\n            {\r\n                listRegions.push(key);\r\n            }\r\n        });\r\n        this.listRegions = listRegions;\r\n    }\r\n}\r\n\r\nselectGeography = (selectedGeography) =>\r\n{\r\n    console.log(selectedGeography);\r\n    console.log(selectedGeography.target.value);\r\n    console.log(this.props.selectGeography);\r\n    this.props.selectGeography(selectedGeography.target.value);\r\n}\r\n\r\nselectRegion = (selectedRegion) =>\r\n{\r\n    this.props.selectRegion(selectedRegion.target.value);\r\n}\r\n\r\nrender() {\r\n\r\n    this.getRegionsForGeography();\r\n\r\n    return (\r\n        <>\r\n            <Accordion defaultActiveKey=\"0\">\r\n            <Card>\r\n                <Card.Header>\r\n                <Accordion.Toggle as={Button} variant=\"link\"  eventKey=\"0\">\r\n                    Select Regions {this.props.accordionOpen}\r\n                </Accordion.Toggle>\r\n                </Card.Header>\r\n                <Accordion.Collapse eventKey=\"0\">\r\n                <Card.Body>\r\n                <Form>\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"formGridGeography\">\r\n                        <Form.Label>Geography</Form.Label>\r\n                        <Form.Control as=\"select\" onChange={this.selectGeography}>\r\n                            <option>Choose...</option>\r\n                            <option>Americas</option>\r\n                            <option>Asia Pacific</option>\r\n                            <option>Europe</option>\r\n                            <option>Middle East and Africa</option>\r\n                            <option>Azure Government</option>\r\n                        </Form.Control>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"formGridRegions\">\r\n                        <Form.Label>Regions</Form.Label>\r\n                        <Form.Control as=\"select\" onChange={this.selectRegion}>\r\n                            <option>Choose...</option>\r\n                            {this.listRegions != null &&\r\n                             this.listRegions.map((e) => {\r\n                                return <option key={e}>{e}</option>;\r\n                             })\r\n                            }\r\n                        </Form.Control>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n                </Form>\r\n                </Card.Body>\r\n                </Accordion.Collapse>\r\n            </Card>\r\n            <Card/>\r\n            </Accordion>\r\n        </>\r\n    );\r\n    \r\n}\r\n  \r\n}"]},"metadata":{},"sourceType":"module"}